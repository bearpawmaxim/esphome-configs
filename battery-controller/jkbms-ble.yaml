ble_client:
  - mac_address: ${mac_address}
    id: client0

jk_bms_ble:
  - ble_client_id: client0
    protocol_version: ${protocol_version}
    throttle: 5s
    id: bms0

binary_sensor:
  - platform: jk_bms_ble
    balancing:
      id: jkbms_balancing
      name: "JKBMS balancing"
    charging:
      id: jkbms_charging
      name: "JKBMS charging"
    discharging:
      id: jkbms_discharging
      name: "JKBMS discharging"
    heating:
      name: "JKBMS heating"
    online_status:
      name: "JKBMS online status"
      on_state:
        then:
          - script.execute:
              id: lvgl_update_status_icon
              name: bms_connection
              is_on: !lambda return x;

sensor:
  - platform: jk_bms_ble
    cell_voltage_1:
      id: jkbms_cell_voltage_1
      name: "JKBMS cell voltage 1"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 1
      #       value: !lambda return x;
    cell_voltage_2:
      id: jkbms_cell_voltage_2
      name: "JKBMS cell voltage 2"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 2
      #       value: !lambda return x;
    cell_voltage_3:
      id: jkbms_cell_voltage_3
      name: "JKBMS cell voltage 3"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 3
      #       value: !lambda return x;
    cell_voltage_4:
      id: jkbms_cell_voltage_4
      name: "JKBMS cell voltage 4"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 4
      #       value: !lambda return x;
    cell_voltage_5:
      id: jkbms_cell_voltage_5
      name: "JKBMS cell voltage 5"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 5
      #       value: !lambda return x;
    cell_voltage_6:
      id: jkbms_cell_voltage_6
      name: "JKBMS cell voltage 6"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 6
      #       value: !lambda return x;
    cell_voltage_7:
      id: jkbms_cell_voltage_7
      name: "JKBMS cell voltage 7"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 7
      #       value: !lambda return x;
    cell_voltage_8:
      id: jkbms_cell_voltage_8
      name: "JKBMS cell voltage 8"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 8
      #       value: !lambda return x;
    cell_voltage_9:
      id: jkbms_cell_voltage_9
      name: "JKBMS cell voltage 9"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 9
      #       value: !lambda return x;
    cell_voltage_10:
      id: jkbms_cell_voltage_10
      name: "JKBMS cell voltage 10"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 10
      #       value: !lambda return x;
    cell_voltage_11:
      id: jkbms_cell_voltage_11
      name: "JKBMS cell voltage 11"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 11
      #       value: !lambda return x;
    cell_voltage_12:
      id: jkbms_cell_voltage_12
      name: "JKBMS cell voltage 12"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 12
      #       value: !lambda return x;
    cell_voltage_13:
      id: jkbms_cell_voltage_13
      name: "JKBMS cell voltage 13"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 13
      #       value: !lambda return x;
    cell_voltage_14:
      id: jkbms_cell_voltage_14
      name: "JKBMS cell voltage 14"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 14
      #       value: !lambda return x;
    cell_voltage_15:
      id: jkbms_cell_voltage_15
      name: "JKBMS cell voltage 15"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_cell_voltage_value
      #       cell_num: 15
      #       value: !lambda return x;
    cell_voltage_16:
      id: jkbms_cell_voltage_16
      name: "JKBMS cell voltage 16"
      on_value:
        - script.execute:
            id: lvgl_update_cell_voltage_value
            cell_num: 16
            value: !lambda return x;
    power_tube_temperature:
      id: jkbms_mos_temp
      name: "JKBMS power tube temperature"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: tmos
      #       value: !lambda return value_accuracy_to_string(x, 0);
    temperature_sensor_1:
      id: jkbms_bat_temp1
      name: "JKBMS temperature sensor 1"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: t1
      #       value: !lambda return value_accuracy_to_string(x, 0);
    temperature_sensor_2:
      id: jkbms_bat_temp2
      name: "JKBMS temperature sensor 2"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: t2
      #       value: !lambda return value_accuracy_to_string(x, 0);
    temperature_sensor_4:
      id: jkbms_bat_temp3
      name: "JKBMS temperature sensor 3"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: t3
      #       value: !lambda return value_accuracy_to_string(x, 0);
    temperature_sensor_5:
      id: jkbms_bat_temp4
      name: "JKBMS temperature sensor 4"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: t4
      #       value: !lambda return value_accuracy_to_string(x, 0);
    total_voltage:
      id: jkbms_total_voltage
      name: "JKBMS total voltage"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: voltage
      #       value: !lambda return value_accuracy_to_string(x, 2);
    current:
      id: "jkbms_current"
      name: "JKBMS current"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: current
      #       value: !lambda return value_accuracy_to_string(x, 2);
      #   - script.execute:
      #       id: lvgl_update_accent_color
      #       current_val: !lambda return x;
      #       is_balancing: !lambda return id(jkbms_balancing).state;
      #   - script.execute:
      #       id: lvgl_update_soc_gauge_labels
      #       current_val: !lambda return x;
      #       voltage_val: !lambda return id(jkbms_total_voltage).state;
    power:
      name: "JKBMS power"
      # on_value:
      #   - script.execute:
      #       id: lvgl_update_label_value
      #       name: power
      #       value: !lambda return value_accuracy_to_string(x, 0);
    capacity_remaining:
      id: jkbms_soc
      name: "JKBMS capacity remaining"
      on_value:
        - script.execute:
            id: lvgl_update_soc
            soc: !lambda return x;
    min_cell_voltage:
      id: jkbms_min_cell_voltage
      name: "JKBMS min cell voltage"
    max_cell_voltage:
      id: jkbms_max_cell_voltage
      name: "JKBMS max cell voltage"
    min_voltage_cell:
      id: jkbms_min_voltage_cell
      name: "JKBMS min voltage cell"
    max_voltage_cell:
      id: jkbms_max_voltage_cell
      name: "JKBMS max voltage cell"
    delta_cell_voltage:
      name: "JKBMS delta cell voltage"
    average_cell_voltage:
      name: "JKBMS average cell voltage"
    charging_power:
      name: "JKBMS charging power"
    discharging_power:
      name: "JKBMS discharging power"
    charging_cycles:
      id: jkbms_charge_cycles_count
      name: "JKBMS charging cycles"
    total_charging_cycle_capacity:
      name: "JKBMS total charging cycle capacity"
    total_runtime:
      name: "JKBMS total runtime"
    total_battery_capacity_setting:
      id: jkbms_actual_capacity
      name: "JKBMS actual battery capacity"
    errors_bitmask:
      id: jkbms_error_bitmask
      name: "JKBMS errors bitmask"
    cell_resistance_1:
      name: "JKBMS cell resistance 1"
    cell_resistance_2:
      name: "JKBMS cell resistance 2"
    cell_resistance_3:
      name: "JKBMS cell resistance 3"
    cell_resistance_4:
      name: "JKBMS cell resistance 4"
    cell_resistance_5:
      name: "JKBMS cell resistance 5"
    cell_resistance_6:
      name: "JKBMS cell resistance 6"
    cell_resistance_7:
      name: "JKBMS cell resistance 7"
    cell_resistance_8:
      name: "JKBMS cell resistance 8"
    cell_resistance_9:
      name: "JKBMS cell resistance 9"
    cell_resistance_10:
      name: "JKBMS cell resistance 10"
    cell_resistance_11:
      name: "JKBMS cell resistance 11"
    cell_resistance_12:
      name: "JKBMS cell resistance 12"
    cell_resistance_13:
      name: "JKBMS cell resistance 13"
    cell_resistance_14:
      name: "JKBMS cell resistance 14"
    cell_resistance_15:
      name: "JKBMS cell resistance 15"
    cell_resistance_16:
      name: "JKBMS cell resistance 16"
  - platform: template
    id: jkbms_pack_overvoltage_protection
    name: "JKBMS total voltage overvoltage protection"
    lambda: return id(jkbms_cell_overvoltage_protection).state * 16;
  - platform: template
    id: jkbms_pack_undervoltage_protection
    name: "JKBMS total voltage undervoltage protection"
    lambda: return id(jkbms_cell_undervoltage_protection).state * 16;
  - platform: template
    id: jkbms_capacity_remaining_ah
    name: "JKBMS capacity remaining derived"
    lambda: return (id(jkbms_actual_capacity).state / 100.0) * id(jkbms_soc).state;
    # on_value:
    #   - script.execute:
    #       id: lvgl_update_label_value
    #       name: capacity
    #       value: !lambda return value_accuracy_to_string(x, 2);
  - platform: template
    id: jkbms_discharging_undertemperature_protection
    name: "JKBMS discharging low temperature protection"
    lambda: return id(jkbms_charging_undertemperature_protection).state;

number:
  - platform: jk_bms_ble
    jk_bms_ble_id: bms0
    current_calibration:
      name: "JKBMS current calibration"
    cell_voltage_overvoltage_protection:
      id: jkbms_cell_overvoltage_protection
      name: "JKBMS cell voltage overvoltage protection"
    cell_voltage_undervoltage_protection:
      id: jkbms_cell_undervoltage_protection
      name: "JKBMS cell voltage undervoltage protection"
    power_tube_overtemperature_protection:
      id: jkbms_mos_overtemperature_protection
      name: "JKBMS power tube temperature protection"
    max_discharge_current:
      id: jkbms_discharging_overcurrent_protection
      name: "JKBMS discharging overcurrent protection"
    max_charge_current:
      id: jkbms_charging_overcurrent_protection
      name: "JKBMS charging overcurrent protection"
    charge_overtemperature_protection:
      id: jkbms_charging_overtemperature_protection
      name: "JKBMS charging high temperature protection"
    discharge_overtemperature_protection:
      id: jkbms_discharging_overtemperature_protection
      name: "JKBMS discharging high temperature protection"
    charge_undertemperature_protection:
      id: jkbms_charging_undertemperature_protection
      name: "JKBMS charging low temperature protection"

switch:
  - platform: jk_bms_ble
    charging:
      id: jkbms_charging_switch
      name: "JKBMS charging"
      on_turn_on:
        - script.execute:
            id: lvgl_update_switch_value
            name: charge_sw
            value: true
      on_turn_off:
        - script.execute:
            id: lvgl_update_switch_value
            name: charge_sw
            value: false
    discharging:
      id: jkbms_discharging_switch
      name: "JKBMS discharging"
      on_turn_on:
        - script.execute:
            id: lvgl_update_switch_value
            name: discharge_sw
            value: true
      on_turn_off:
        - script.execute:
            id: lvgl_update_switch_value
            name: discharge_sw
            value: false

text_sensor:
  - platform: jk_bms_ble
    errors:
      name: "JKBMS errors"
      on_value:
        - script.execute:
            id: lvgl_update_error_label
            error: !lambda return x;
    # operation_mode:
    #   name: "JKBMS operation mode"
    # device_type:
    #   name: "JKBMS device type"
    # software_version:
    #   name: "JKBMS software version"
    # manufacturer:
    #   name: "JKBMS manufacturer"
    # total_runtime_formatted:
    #   name: "JKBMS total runtime formatted"
    total_runtime_formatted:
      name: "JKBMS total runtime formatted"
