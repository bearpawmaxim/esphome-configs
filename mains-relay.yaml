substitutions:
  device_name: mains-relay
  device_name_underscore: mains_relay
  relay_pin: GPIO12
  button_pin: GPIO0
  delay_time: 1min

globals:
  - id: error_ms
    type: uint16_t
    initial_value: "1000"
  - id: last_update
    type: ulong
    initial_value: "millis()"

packages:
  device_common: !include .device_common.yaml
  delayed_start: !include .sonoff_delayed_start.yaml

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp8285

logger:
  level: DEBUG
  baud_rate: 0

uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600

sensor:
  - platform: pzemac
    id: pzem1
    current:
      name: "Mains Current"
      id: mains_current
    voltage:
      name: "Mains Voltage"
      id: mains_voltage
      on_value:
        - lambda: |-
            id(last_update) = millis();
    energy:
      name: "Mains Energy"
      id: mains_energy
    power:
      name: "Mains Power"
      id: mains_power
    frequency:
      name: "Mains Frequency"
      id: mains_frequency
    power_factor:
      name: "Mains Power Factor"
      id: mains_power_factor
    update_interval: 60s

  - platform: total_daily_energy
    name: "Mains Total Daily Energy"
    power_id: mains_power
    id: mains_daily_energy
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing

interval:
  - interval: 60s
    then:
      - lambda: |-
          ulong now = millis();
          ulong valid_update_timeout = id(pzem1).get_update_interval() +
            id(error_ms);
          ulong last_valid_update = id(last_update) +
            valid_update_timeout;
          if (last_valid_update < now) {
            ESP_LOGW("PZEM", "No readings received within %d seconds. Sending state 0.",
              (ulong)(valid_update_timeout / 1000));
            id(mains_current)->publish_state(0.0);
            id(mains_voltage)->publish_state(0.0);
            // id(mains_energy)->publish_state(0.0);
            id(mains_power)->publish_state(0.0);
            id(mains_frequency)->publish_state(0.0);
            id(mains_power_factor)->publish_state(0.0);
          }

button:
  - platform: template
    name: "Reset PZEM-004T"
    id: reset_pzem_004t
    on_press:
      - uart.write: [0x01, 0x42, 0x80, 0x11]

status_led:
  pin:
    number: GPIO13
    inverted: yes
