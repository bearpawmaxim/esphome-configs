globals:
  - id: lv_bg_color
    type: lv_color_t
  - id: lv_soc_color
    type: lv_color_t

font:
  - file: battery-controller/SquareDotMatrix.ttf
    id: gauge_font
    bpp: 4
    size: 36
    glyphs: ['0','1','2','3','4','5','6','7','8','9','%',' ','n','a']
  - file: battery-controller/MaterialDesignIcons.ttf
    id: mdi_font
    bpp: 4
    size: 18
    glyphs: [
      "\U000F010C", # bms
      "\U000F0F92", # inverter
      "\U000F05A9"  # wifi
    ]

color:
  - id: color_red
    red: 100%
  - id: color_green
    green: 100%
  - id: off_color
    hex: FF4F00
  - id: on_color
    hex: 58D900
  - id: balancing_color
    red_int: 145
    green_int: 245
    blue_int: 242
  - id: std_cell_voltage_color
    hex: 58D900
  - id: min_cell_voltage_color
    hex: FF4F00
  - id: max_cell_voltage_color
    hex: 00ADFF
  - id: label_heading_color
    hex: FFFFFF
  - id: label_value_color
    hex: 58D900

image:
  - id: bg_img
    file: battery-controller/hexagons-320.png
    type: RGB565
    use_transparency: true

lvgl:
  id: lvgl0
  log_level: WARN
  color_depth: 16
  bg_color: 0x000000
  text_font: unscii_8
  align: center
  touchscreens:
    - touchscreen_id: touch
  top_layer:
    widgets:
      - <<: !include lvgl-header.yaml
  pages:
    # Main page
    - id: main_page
      bg_color: 0x606672
      bg_grad_color: 0x33363E
      bg_grad_dir: VER
      bg_dither_mode: ORDERED
      scrollable: false
      widgets:
        - obj:
            id: bg_img_bottom
            x: 0
            y: 0
            width: 320
            height: 320
            bg_color: 0x000000
            bg_opa: 0.3
            border_opa: 0
            radius: 0
            scrollable: false
            align: TOP_LEFT
            pad_all: 0
            widgets:
              - image:
                  src: bg_img
                  x: -2
        # SOC gauge
        - <<: !include { file: lvgl-gauge.yaml, vars: { g_name: soc } }
        # Bms error label
        - <<: !include lvgl-bms-error-label.yaml
        # Contactor led and label
        # - <<: !include lvgl-status-led.yaml
        # Right panel
        - tileview:
            id: stats_tile
            x: 320
            y: 20
            height: 300
            width: 160
            bg_color: 0x202831
            bg_grad_color: 0x101215
            bg_dither_mode: ORDERED
            bg_grad_dir: VER
            on_value:
              - script.execute:
                  id: lvgl_set_active_tile_num
                  tile: !lambda 'return tile;'
              - if:
                  condition:
                    - lambda: 'return id(is_automatic_tile_change);'
                  then:
                    - globals.set:
                        id: is_automatic_tile_change
                        value: 'false'
                  else:
                    - component.suspend: change_tile_interval
            tiles:
              - row: 0
                column: 0
                id: tile_general_1
                dir: [ RIGHT ]
                widgets:
                  - obj:
                      <<: !include ..\lvgl-common\lvgl-tile-container.yaml
                      widgets:
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: voltage,            l_capt: Voltage,   l_unit: V  } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: current,            l_capt: Currrent,  l_unit: A  } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: power,              l_capt: Power,     l_unit: W  } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: capacity,           l_capt: Capacity,  l_unit: Ah } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: delta_cell_voltage, l_capt: Cell diff, l_unit: V  } }
              - row: 0
                column: 1
                id: tile_general_2
                dir: [ LEFT, RIGHT ]
                widgets:
                  - obj:
                      <<: !include ..\lvgl-common\lvgl-tile-container.yaml
                      widgets:
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: t1,   l_capt: BATT Temp 1,   l_unit: C } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: t2,   l_capt: BATT Temp 2,   l_unit: C } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: t3,   l_capt: BATT Temp 3,   l_unit: C } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: t4,   l_capt: BATT Temp 4,   l_unit: C } }
                        - <<: !include { file: lvgl-label-group-big.yaml, vars: { l_name: tmos, l_capt: MOS Temp, l_unit: C } }
              - row: 0
                column: 2
                id: tile_switches
                dir: [ LEFT, RIGHT ]
                widgets:
                  - obj:
                      <<: !include ..\lvgl-common\lvgl-tile-container.yaml
                      widgets:
                        - <<: !include { file: lvgl-switch-group.yaml, vars: { sw_name: charge,    sw_capt: Charge,    sw_readonly: true } }
                        - <<: !include { file: lvgl-switch-group.yaml, vars: { sw_name: discharge, sw_capt: Discharge, sw_readonly: true } }
                        - <<: !include { file: lvgl-switch-group.yaml, vars: { sw_name: balance,   sw_capt: Balance,   sw_readonly: true } }
              - row: 0
                column: 3
                id: tile_voltages
                dir: [ LEFT ]
                widgets:
                  - obj:
                      <<: !include ..\lvgl-common\lvgl-tile-container.yaml
                      widgets:
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell1voltage,  b_capt: 1, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell2voltage,  b_capt: 2, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell3voltage,  b_capt: 3, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell4voltage,  b_capt: 4, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell5voltage,  b_capt: 5, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell6voltage,  b_capt: 6, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell7voltage,  b_capt: 7, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell8voltage,  b_capt: 8, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell9voltage,  b_capt: 9, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell10voltage, b_capt: 10, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell11voltage, b_capt: 11, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell12voltage, b_capt: 12, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell13voltage, b_capt: 13, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell14voltage, b_capt: 14, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell15voltage, b_capt: 15, b_unit: V } }
                        - <<: !include { file: lvgl-voltage-bar.yaml, vars: { b_name: cell16voltage, b_capt: 16, b_unit: V } }
    # Blank page
    - id: blank_page
      bg_color: 0x000000
      bg_opa: 1
  on_idle:
    timeout: !lambda return (id(display_timeout).state * 1000);
    then:
      - script.execute: lvgl_pause

number:
  - platform: template
    name: Screen timeout
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: 45
    restore_value: true
    min_value: 10
    max_value: 180
    step: 5
    mode: box

interval:
  - interval: 1sec
    id: update_time_interval
    startup_delay: 5sec
    then:
      - script.execute: lvgl_update_time
  - interval: 5sec
    id: change_tile_interval
    startup_delay: 5sec
    then:
      - script.execute: lvgl_change_tile
  - interval: 1min
    id: update_date_interval
    startup_delay: 5sec
    then:
      - script.execute: lvgl_update_date

script:
  - id: lvgl_update_accent_color
    mode: single
    parameters:
      current_val: float
      is_balancing: bool
    then:
      - lambda: |-
          Color cl;
          if (current_val > 0) {
            cl = is_balancing
              ? id(balancing_color)
              : id(on_color);
          } else {
            cl = id(off_color);
          }
          id(lv_bg_color) = lv_color_make(cl.red, cl.green, cl.blue);
      - lvgl.widget.update:
          id: soc_inner_circle_background
          bg_color: !lambda return id(lv_bg_color);
      - lvgl.widget.update:
          id: soc_inner_circle
          border_color: !lambda return id(lv_bg_color);
      - lvgl.widget.update:
          id: bg_img_bottom
          bg_color: !lambda return id(lv_bg_color);
      - lvgl.widget.update:
          id: soc_lower_label
          text_color: !lambda return id(lv_bg_color);
  - id: lvgl_change_tile
    mode: single
    then:
      - globals.set:
          id: is_automatic_tile_change
          value: 'true'
      - globals.set:
          id: current_tile_num
          value: !lambda |-
            return (id(current_tile_num) + 1) < 4
              ? id(current_tile_num) + 1
              : 0;
      - lambda: |-
          lv_obj_set_tile_id(id(stats_tile), id(current_tile_num), 0, LV_ANIM_ON);
  - id: lvgl_set_active_tile_num
    mode: single
    parameters:
      tile: lv_obj_t*
    then:
      - lambda: |-
          if (tile == id(tile_general_1)) {
            id(current_tile_num) = 0;
          } else if (tile == id(tile_general_2)) {
            id(current_tile_num) = 1;
          } else if (tile == id(tile_switches)) {
            id(current_tile_num) = 2;
          } else if (tile == id(tile_voltages)) {
            id(current_tile_num) = 3;
          }
  - id: lvgl_update_switch_value
    parameters:
      name: string
      value: bool
    mode: queued
    max_runs: 3
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> switch_map {
            { "charge_sw",    id(charge_sw)    },
            { "discharge_sw", id(discharge_sw) },
            { "balance_sw",   id(balance_sw)   }
          };
          auto iterator = switch_map.find(name);
          if (iterator != switch_map.end()) {
            lv_obj_t* sw = iterator->second;
            if (value) {
              lv_obj_add_state(sw, LV_STATE_CHECKED);
            } else {
              lv_obj_clear_state(sw, LV_STATE_CHECKED);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find switch %s", name.c_str());
  - id: lvgl_update_status_icon
    parameters:
      name: string
      is_on: bool
    mode: queued
    max_runs: 3
    then:
      - if:
          condition:
            - lambda: return name == "api_connection";
          then:
            if:
              condition:
                - lambda: return is_on;
              then:
                - lvgl.widget.update:
                    id: api_connection
                    text_color: on_color
              else:
                - lvgl.widget.update:
                      id: api_connection
                      text_color: off_color
          else:
            - if:
                condition:
                  - lambda: return name == "bms_connection";
                then:
                  - if:
                      condition:
                        - lambda: return is_on;
                      then:
                        - lvgl.widget.update:
                            id: bms_connection
                            text_color: on_color
                      else:
                        - lvgl.widget.update:
                            id: bms_connection
                            text_color: off_color
                else:
                  - if:
                      condition:
                        - lambda: return is_on;
                      then:
                        - lvgl.widget.update:
                            id: inv_connection
                            text_color: on_color
                      else:
                        - lvgl.widget.update:
                            id: inv_connection
                            text_color: off_color
      # - lambda: |-
      #     static const std::map<std::string, lv_obj_t*> icons_map {
      #       { "api_connection", id(api_connection) },
      #       { "bms_connection", id(bms_connection) },
      #       { "inv_connection", id(inv_connection) }
      #     };
      #     auto iterator = icons_map.find(name);
      #     if (iterator != icons_map.end()) {
      #       lv_obj_t* icon = iterator->second;
      #       lv_obj_set_style_text_color(icon, lv_color_from(is_on
      #           ? id(on_color)
      #           : id(off_color)),
      #         (int)LV_STATE_DEFAULT|(int)LV_PART_MAIN);
      #       lv_event_send(icon, LV_EVENT_VALUE_CHANGED, nullptr);
      #       return;
      #     }
      #     ESP_LOGE("BMS", "Cannot find icon %s", name.c_str());
  - id: lvgl_update_cell_voltage_value
    parameters:
      cell_num: uint8_t
      value: float
    mode: queued
    max_runs: 16
    then:
      - lambda: |-
          bool is_min_voltage_cell = id(jkbms_min_voltage_cell)->state == cell_num;
          bool is_max_voltage_cell = id(jkbms_max_voltage_cell)->state == cell_num;
          static const std::map<uint8_t, lv_obj_t*> bars_map {
            { 1,  id(cell1voltage_value_bar) },
            { 2,  id(cell2voltage_value_bar) },
            { 3,  id(cell3voltage_value_bar) },
            { 4,  id(cell4voltage_value_bar) },
            { 5,  id(cell5voltage_value_bar) },
            { 6,  id(cell6voltage_value_bar) },
            { 7,  id(cell7voltage_value_bar) },
            { 8,  id(cell8voltage_value_bar) },
            { 9,  id(cell9voltage_value_bar) },
            { 10, id(cell10voltage_value_bar) },
            { 11, id(cell11voltage_value_bar) },
            { 12, id(cell12voltage_value_bar) },
            { 13, id(cell13voltage_value_bar) },
            { 14, id(cell14voltage_value_bar) },
            { 15, id(cell15voltage_value_bar) },
            { 16, id(cell16voltage_value_bar) }
          };
          static const std::map<uint8_t, lv_obj_t*> bar_labels_map {
            { 1,  id(cell1voltage_value_label) },
            { 2,  id(cell2voltage_value_label) },
            { 3,  id(cell3voltage_value_label) },
            { 4,  id(cell4voltage_value_label) },
            { 5,  id(cell5voltage_value_label) },
            { 6,  id(cell6voltage_value_label) },
            { 7,  id(cell7voltage_value_label) },
            { 8,  id(cell8voltage_value_label) },
            { 9,  id(cell9voltage_value_label) },
            { 10, id(cell10voltage_value_label) },
            { 11, id(cell11voltage_value_label) },
            { 12, id(cell12voltage_value_label) },
            { 13, id(cell13voltage_value_label) },
            { 14, id(cell14voltage_value_label) },
            { 15, id(cell15voltage_value_label) },
            { 16, id(cell16voltage_value_label) }
          };
          auto bar_it = bars_map.find(cell_num);
          if (bar_it != bars_map.end()) {
            lv_obj_t* value_bar = bar_it->second;
            uint8_t real_value = isnan(value)
              ? 0
              : static_cast<uint8_t>((value - 2.5) * 100.0f);
            lv_bar_set_value(value_bar, real_value, LV_ANIM_OFF);
            auto bar_color = is_min_voltage_cell || is_max_voltage_cell
              ? (is_min_voltage_cell
                  ? id(min_cell_voltage_color)
                  : id(max_cell_voltage_color))
              : id(std_cell_voltage_color);
            lv_color_t lv_bar_color = lv_color_make(bar_color.r, bar_color.g, bar_color.b);
            lv_obj_set_style_bg_color(value_bar, lv_bar_color, LV_PART_INDICATOR);
            auto label_it = bar_labels_map.find(cell_num);
            if (label_it != bar_labels_map.end()) {
              lv_obj_t* value_label = label_it->second;
              lv_label_set_text(value_label, value_accuracy_to_string(value, 3).c_str());
              lv_event_send(value_label, LV_EVENT_VALUE_CHANGED, nullptr);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find cell voltage bar %d", cell_num);
  - id: lvgl_update_label_value
    parameters:
      name: string
      value: string
    mode: queued
    max_runs: 30
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> labels_map {
            { "voltage",            id(voltage_value_label) },
            { "current",            id(current_value_label) },
            { "power",              id(power_value_label) },
            { "capacity",           id(capacity_value_label) },
            { "delta_cell_voltage", id(delta_cell_voltage_value_label) },
            { "t1",                 id(t1_value_label) },
            { "t2",                 id(t2_value_label) },
            { "t3",                 id(t3_value_label) },
            { "t4",                 id(t4_value_label) },
            { "tmos",               id(tmos_value_label) }
          };
          static const std::map<std::string, lv_obj_t*> unit_labels_map {
            { "voltage",            id(voltage_unit_label) },
            { "current",            id(current_unit_label) },
            { "power",              id(power_unit_label) },
            { "capacity",           id(capacity_unit_label) },
            { "delta_cell_voltage", id(delta_cell_voltage_unit_label) },
            { "t1",                 id(t1_unit_label) },
            { "t2",                 id(t2_unit_label) },
            { "t3",                 id(t3_unit_label) },
            { "t4",                 id(t4_unit_label) },
            { "tmos",               id(tmos_unit_label) }
          };
          auto label_it = labels_map.find(name);
          if (label_it != labels_map.end()) {
            lv_obj_t* value_label = label_it->second;
            lv_label_set_text(value_label, value.c_str());
            lv_event_send(value_label, LV_EVENT_VALUE_CHANGED, nullptr);
            auto units_it = unit_labels_map.find(name);
            if (units_it != labels_map.end()) {
              lv_obj_t* unit_label = units_it->second;
              lv_obj_align_to(unit_label, value_label, LV_ALIGN_OUT_RIGHT_TOP, 3, 0);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find label %s", name.c_str());
  - id: lvgl_update_time
    then:
      lvgl.label.update:
        id: header_time
        text: !lambda |-
          if (!id(sntp_time->now()).is_valid()) {
            return "--:--:--";
          }
          static char time_buf[17];
          auto time = id(sntp_time).now();
          snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", time.hour, time.minute, time.second);
          return time_buf;
  - id: lvgl_update_date
    then:
      lvgl.label.update:
        id: header_date
        text: !lambda |-
          static const char* const mon_names[] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
          static char date_buf[16];
          auto now = id(sntp_time).now();
          snprintf(date_buf, sizeof(date_buf), "%s %02d, %d", mon_names[now.month-1], now.day_of_month, now.year);
          return date_buf;
  - id: lvgl_update_error_label
    parameters:
      error: string
    then:
      - if:
          condition:
            lambda: return !error.empty();
          then:
            - lvgl.widget.show: bms_errors_label
            - lvgl.label.update:
                id: bms_errors_label
                text: !lambda return error.c_str();
          else:
            - lvgl.widget.hide: bms_errors_label
  - id: lvgl_update_soc_gauge_labels
    mode: single
    parameters:
      voltage_val: float
      current_val: float
    then:
      - lvgl.label.update:
          id: soc_upper_label
          text:
            format: "%.2fV"
            args: '(float)(isnan(voltage_val) ? 0 : voltage_val)'
      - lvgl.label.update:
          id: soc_lower_label
          text:
            format: "%.2fA"
            args: '(float)(isnan(current_val) ? 0 : current_val)'
  - id: lvgl_update_soc
    mode: single
    parameters:
      soc: float
    then:
      - lambda: |-
          lv_color_hsv_t lv_hsv_color = {};
          lv_hsv_color.h = soc;
          lv_hsv_color.s = 100;
          lv_hsv_color.v = 100;
          id(lv_soc_color) = lv_color_hsv_to_rgb(lv_hsv_color.h,
            lv_hsv_color.s, lv_hsv_color.v);
      - lvgl.arc.update:
          id: soc_arc
          value: !lambda return soc;
          indicator:
            arc_color: !lambda return id(lv_soc_color);
      - lvgl.label.update:
          id: soc_center_label
          text:
            format: "%d%%"
            args: '(int)(isnan(soc) ? 0 : soc)'
      - lvgl.widget.update:
          id: soc_upper_label
          text_color: !lambda return id(lv_soc_color);
  - id: lvgl_pause
    mode: single
    then:
      - component.suspend: change_tile_interval
      - component.suspend: update_time_interval
      - component.suspend: update_date_interval
      - light.turn_off: backlight
      - lvgl.page.show: blank_page
      - lvgl.widget.hide: header
      - delay: 1s
      - lvgl.pause
  - id: lvgl_resume
    mode: single
    then:
      - if:
          condition:
            lvgl.is_paused
          then:
            - lvgl.resume
            - lvgl.page.show: main_page
            - lvgl.widget.show: header
            - light.turn_on: backlight
            - component.resume: change_tile_interval
            - component.resume: update_time_interval
            - component.resume: update_date_interval
  # - id: lvgl_update_led
  #   mode: single
  #   parameters:
  #     l_text: string
  #     l_color: esphome::Color
  #   then:
  #     - lvgl.label.update:
  #         id: status_label
  #         text: !lambda return l_text.c_str();
  #     - lvgl.led.update:
  #         id: status_led
  #         color: !lambda |-
  #           return lv_color_make(l_color.red, 
  #             l_color.green, l_color.blue);
