interval:
  - interval: 1sec
    id: update_time_interval
    startup_delay: 5sec
    then:
      - script.execute: lvgl_update_time
  - interval: 5sec
    id: change_tile_interval
    startup_delay: 5sec
    then:
      - script.execute: lvgl_change_tile
  - interval: 1min
    id: update_date_interval
    startup_delay: 5sec
    then:
      - script.execute: lvgl_update_date
  - interval: 1sec
    id: update_bms_values_interval
    startup_delay: 2sec
    then:
      - script.execute: lvgl_update_bms_values
  - interval: 5sec
    id: update_bms_state_interval
    startup_delay: 2sec
    then:
      - script.execute: lvgl_update_bms_state

script:
  - id: lvgl_update_values
    mode: single
    parameters:
      voltage: float
      current: float
      power: float
      soc: float
      capacity: float
      delta_cell_voltage: float
      t1: float
      t2: float
      t3: float
      t4: float
      tmos: float
      charge: bool
      discharge: bool
      balance: bool
      is_balancing: bool
      cell1_voltage: float
      cell2_voltage: float
      cell3_voltage: float
      cell4_voltage: float
      cell5_voltage: float
      cell6_voltage: float
      cell7_voltage: float
      cell8_voltage: float
      cell9_voltage: float
      cell10_voltage: float
      cell11_voltage: float
      cell12_voltage: float
      cell13_voltage: float
      cell14_voltage: float
      cell15_voltage: float
      cell16_voltage: float
      alarms: std::string
    then:
      - script.execute:
          id: lvgl_update_accent_color
          current_val: !lambda return current;
          is_balancing: !lambda return is_balancing;
      - script.execute:
          id: lvgl_update_soc_gauge_labels
          current_val: !lambda return current;
          voltage_val: !lambda return voltage;
      - script.execute:
          id: lvgl_update_soc
          soc: !lambda return soc;
      - lambda: |-
          switch (id(current_tile_num)) {
            case 0:
              id(lvgl_update_tile_general_1)
                ->execute(voltage, current, power, capacity, delta_cell_voltage);
              break;
            case 1:
              id(lvgl_update_tile_general_2)
                ->execute(t1, t2, t3, t4, tmos);
              break;
            case 2:
              id(lvgl_update_tile_switches)
                ->execute(charge, discharge, balance);
              break;
            case 3:
              auto voltages = std::vector<float>{
                cell1_voltage, cell2_voltage, cell3_voltage, cell4_voltage,
                cell5_voltage, cell6_voltage, cell7_voltage, cell8_voltage,
                cell9_voltage, cell10_voltage, cell11_voltage, cell12_voltage,
                cell13_voltage, cell14_voltage, cell15_voltage, cell16_voltage
              };
              id(lvgl_update_tile_voltages)->execute({ .voltages = voltages });
              break;
          }
      - script.execute:
          id: lvgl_update_error_label
          error: !lambda return alarms;

  - id: lvgl_update_tile_general_1
    mode: single
    parameters:
      voltage: float
      current: float
      power: float
      capacity: float
      delta_cell_voltage: float
    then:
      - script.execute:
          id: lvgl_update_label_value
          name: 'voltage'
          value: !lambda return value_accuracy_to_string(voltage, 2);
      - script.execute:
          id: lvgl_update_label_value
          name: 'current'
          value: !lambda return value_accuracy_to_string(current, 2);
      - script.execute:
          id: lvgl_update_label_value
          name: 'power'
          value: !lambda return value_accuracy_to_string(power, 2);
      - script.execute:
          id: lvgl_update_label_value
          name: 'capacity'
          value: !lambda return value_accuracy_to_string(capacity, 0);
      - script.execute:
          id: lvgl_update_label_value
          name: 'delta_cell_voltage'
          value: !lambda return value_accuracy_to_string(delta_cell_voltage, 3);

  - id: lvgl_update_tile_general_2
    mode: single
    parameters:
      t1: float
      t2: float
      t3: float
      t4: float
      tmos: float
    then:
      - script.execute:
          id: lvgl_update_label_value
          name: 't1'
          value: !lambda return value_accuracy_to_string(t1, 1);
      - script.execute:
          id: lvgl_update_label_value
          name: 't2'
          value: !lambda return value_accuracy_to_string(t2, 1);
      - script.execute:
          id: lvgl_update_label_value
          name: 't3'
          value: !lambda return value_accuracy_to_string(t3, 1);
      - script.execute:
          id: lvgl_update_label_value
          name: 't4'
          value: !lambda return value_accuracy_to_string(t4, 1);
      - script.execute:
          id: lvgl_update_label_value
          name: 'tmos'
          value: !lambda return value_accuracy_to_string(tmos, 1);

  - id: lvgl_update_tile_switches
    mode: single
    parameters:
      charge: bool
      discharge: bool
      balance: bool
    then:
      - script.execute:
          id: lvgl_update_switch_value
          name: charge_sw
          value: !lambda return charge;
      - script.execute:
          id: lvgl_update_switch_value
          name: discharge_sw
          value: !lambda return discharge;
      - script.execute:
          id: lvgl_update_switch_value
          name: balance_sw
          value: !lambda return balance;

  - id: lvgl_update_tile_voltages
    mode: single
    parameters:
      voltages: std::vector<float>
    then:
      - lambda: |-
          for (size_t i = 0; i < voltages.size(); ++i) {
            id(lvgl_update_cell_voltage_value).execute(i + 1, voltages[i]);
          }

  - id: lvgl_update_accent_color
    mode: single
    parameters:
      current_val: float
      is_balancing: bool
    then:
      - lambda: |-
          Color cl;
          if (current_val > 0) {
            cl = is_balancing
              ? id(balancing_color)
              : id(on_color);
          } else {
            cl = id(off_color);
          }
          id(lv_bg_color) = lv_color_make(cl.red, cl.green, cl.blue);
      - lvgl.widget.update:
          id: soc_inner_circle_background
          bg_color: !lambda return id(lv_bg_color);
      - lvgl.widget.update:
          id: soc_inner_circle
          border_color: !lambda return id(lv_bg_color);
      - lvgl.widget.update:
          id: bg_img_bottom
          bg_color: !lambda return id(lv_bg_color);
      - lvgl.widget.update:
          id: soc_lower_label
          text_color: !lambda return id(lv_bg_color);

  - id: lvgl_change_tile
    mode: single
    then:
      - globals.set:
          id: is_automatic_tile_change
          value: 'true'
      - globals.set:
          id: current_tile_num
          value: !lambda |-
            return (id(current_tile_num) + 1) < 4
              ? id(current_tile_num) + 1
              : 0;
      - lambda: |-
          lv_obj_set_tile_id(id(stats_tile), id(current_tile_num), 0, LV_ANIM_ON);

  - id: lvgl_set_active_tile_num
    mode: single
    parameters:
      tile: lv_obj_t*
    then:
      - lambda: |-
          if (tile == id(tile_general_1)) {
            id(current_tile_num) = 0;
          } else if (tile == id(tile_general_2)) {
            id(current_tile_num) = 1;
          } else if (tile == id(tile_switches)) {
            id(current_tile_num) = 2;
          } else if (tile == id(tile_voltages)) {
            id(current_tile_num) = 3;
          }

  - id: lvgl_update_switch_value
    parameters:
      name: string
      value: bool
    mode: queued
    max_runs: 3
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> switch_map {
            { "charge_sw",    id(charge_sw)    },
            { "discharge_sw", id(discharge_sw) },
            { "balance_sw",   id(balance_sw)   }
          };
          auto iterator = switch_map.find(name);
          if (iterator != switch_map.end()) {
            lv_obj_t* sw = iterator->second;
            if (value) {
              lv_obj_add_state(sw, LV_STATE_CHECKED);
            } else {
              lv_obj_clear_state(sw, LV_STATE_CHECKED);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find switch %s", name.c_str());

  - id: lvgl_update_status_icon
    parameters:
      name: string
      is_on: bool
    mode: queued
    max_runs: 3
    then:
      - if:
          condition:
            - lambda: return name == "api_connection";
          then:
            if:
              condition:
                - lambda: return is_on;
              then:
                - lvgl.widget.update:
                    id: api_connection
                    text_color: on_color
              else:
                - lvgl.widget.update:
                      id: api_connection
                      text_color: off_color
          else:
            - if:
                condition:
                  - lambda: return name == "bms_connection";
                then:
                  - if:
                      condition:
                        - lambda: return is_on;
                      then:
                        - lvgl.widget.update:
                            id: bms_connection
                            text_color: on_color
                      else:
                        - lvgl.widget.update:
                            id: bms_connection
                            text_color: off_color
                else:
                  - if:
                      condition:
                        - lambda: return is_on;
                      then:
                        - lvgl.widget.update:
                            id: inv_connection
                            text_color: on_color
                      else:
                        - lvgl.widget.update:
                            id: inv_connection
                            text_color: off_color

  - id: lvgl_update_cell_voltage_value
    parameters:
      cell_num: uint8_t
      value: float
    mode: queued
    max_runs: 16
    then:
      - lambda: |-
          bool is_min_voltage_cell = id(jkbms_min_voltage_cell)->state == cell_num;
          bool is_max_voltage_cell = id(jkbms_max_voltage_cell)->state == cell_num;
          static const std::map<uint8_t, lv_obj_t*> bars_map {
            { 1,  id(cell1voltage_value_bar) },
            { 2,  id(cell2voltage_value_bar) },
            { 3,  id(cell3voltage_value_bar) },
            { 4,  id(cell4voltage_value_bar) },
            { 5,  id(cell5voltage_value_bar) },
            { 6,  id(cell6voltage_value_bar) },
            { 7,  id(cell7voltage_value_bar) },
            { 8,  id(cell8voltage_value_bar) },
            { 9,  id(cell9voltage_value_bar) },
            { 10, id(cell10voltage_value_bar) },
            { 11, id(cell11voltage_value_bar) },
            { 12, id(cell12voltage_value_bar) },
            { 13, id(cell13voltage_value_bar) },
            { 14, id(cell14voltage_value_bar) },
            { 15, id(cell15voltage_value_bar) },
            { 16, id(cell16voltage_value_bar) }
          };
          static const std::map<uint8_t, lv_obj_t*> bar_labels_map {
            { 1,  id(cell1voltage_value_label) },
            { 2,  id(cell2voltage_value_label) },
            { 3,  id(cell3voltage_value_label) },
            { 4,  id(cell4voltage_value_label) },
            { 5,  id(cell5voltage_value_label) },
            { 6,  id(cell6voltage_value_label) },
            { 7,  id(cell7voltage_value_label) },
            { 8,  id(cell8voltage_value_label) },
            { 9,  id(cell9voltage_value_label) },
            { 10, id(cell10voltage_value_label) },
            { 11, id(cell11voltage_value_label) },
            { 12, id(cell12voltage_value_label) },
            { 13, id(cell13voltage_value_label) },
            { 14, id(cell14voltage_value_label) },
            { 15, id(cell15voltage_value_label) },
            { 16, id(cell16voltage_value_label) }
          };
          auto bar_it = bars_map.find(cell_num);
          if (bar_it != bars_map.end()) {
            lv_obj_t* value_bar = bar_it->second;
            uint8_t real_value = isnan(value)
              ? 0
              : static_cast<uint8_t>((value - 2.5) * 100.0f);
            lv_bar_set_value(value_bar, real_value, LV_ANIM_OFF);
            auto bar_color = is_min_voltage_cell || is_max_voltage_cell
              ? (is_min_voltage_cell
                  ? id(min_cell_voltage_color)
                  : id(max_cell_voltage_color))
              : id(std_cell_voltage_color);
            lv_color_t lv_bar_color = lv_color_make(bar_color.r, bar_color.g, bar_color.b);
            lv_obj_set_style_bg_color(value_bar, lv_bar_color, LV_PART_INDICATOR);
            auto label_it = bar_labels_map.find(cell_num);
            if (label_it != bar_labels_map.end()) {
              lv_obj_t* value_label = label_it->second;
              lv_label_set_text(value_label, value_accuracy_to_string(value, 3).c_str());
              lv_event_send(value_label, LV_EVENT_VALUE_CHANGED, nullptr);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find cell voltage bar %d", cell_num);

  - id: lvgl_update_label_value
    parameters:
      name: string
      value: string
    mode: queued
    max_runs: 30
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> labels_map {
            { "voltage",            id(voltage_value_label) },
            { "current",            id(current_value_label) },
            { "power",              id(power_value_label) },
            { "capacity",           id(capacity_value_label) },
            { "delta_cell_voltage", id(delta_cell_voltage_value_label) },
            { "t1",                 id(t1_value_label) },
            { "t2",                 id(t2_value_label) },
            { "t3",                 id(t3_value_label) },
            { "t4",                 id(t4_value_label) },
            { "tmos",               id(tmos_value_label) }
          };
          static const std::map<std::string, lv_obj_t*> unit_labels_map {
            { "voltage",            id(voltage_unit_label) },
            { "current",            id(current_unit_label) },
            { "power",              id(power_unit_label) },
            { "capacity",           id(capacity_unit_label) },
            { "delta_cell_voltage", id(delta_cell_voltage_unit_label) },
            { "t1",                 id(t1_unit_label) },
            { "t2",                 id(t2_unit_label) },
            { "t3",                 id(t3_unit_label) },
            { "t4",                 id(t4_unit_label) },
            { "tmos",               id(tmos_unit_label) }
          };
          auto label_it = labels_map.find(name);
          if (label_it != labels_map.end()) {
            lv_obj_t* value_label = label_it->second;
            lv_label_set_text(value_label, value.c_str());
            lv_event_send(value_label, LV_EVENT_VALUE_CHANGED, nullptr);
            auto units_it = unit_labels_map.find(name);
            if (units_it != labels_map.end()) {
              lv_obj_t* unit_label = units_it->second;
              lv_obj_align_to(unit_label, value_label, LV_ALIGN_OUT_RIGHT_TOP, 3, 0);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find label %s", name.c_str());

  - id: lvgl_update_time
    then:
      lvgl.label.update:
        id: header_time
        text: !lambda |-
          if (!id(sntp_time->now()).is_valid()) {
            return "--:--:--";
          }
          static char time_buf[17];
          auto time = id(sntp_time).now();
          snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", time.hour, time.minute, time.second);
          return time_buf;

  - id: lvgl_update_date
    then:
      lvgl.label.update:
        id: header_date
        text: !lambda |-
          static const char* const mon_names[] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
          static char date_buf[16];
          auto now = id(sntp_time).now();
          snprintf(date_buf, sizeof(date_buf), "%s %02d, %d", mon_names[now.month-1], now.day_of_month, now.year);
          return date_buf;

  - id: lvgl_update_error_label
    parameters:
      error: string
    then:
      - if:
          condition:
            lambda: return !error.empty();
          then:
            - lvgl.widget.show: bms_errors_label
            - lvgl.label.update:
                id: bms_errors_label
                text: !lambda return error.c_str();
          else:
            - lvgl.widget.hide: bms_errors_label

  - id: lvgl_update_soc_gauge_labels
    mode: single
    parameters:
      voltage_val: float
      current_val: float
    then:
      - lvgl.label.update:
          id: soc_upper_label
          text:
            format: "%.2fV"
            args: '(float)(isnan(voltage_val) ? 0 : voltage_val)'
      - lvgl.label.update:
          id: soc_lower_label
          text:
            format: "%.2fA"
            args: '(float)(isnan(current_val) ? 0 : current_val)'

  - id: lvgl_update_soc
    mode: single
    parameters:
      soc: float
    then:
      - lambda: |-
          lv_color_hsv_t lv_hsv_color = {};
          lv_hsv_color.h = soc;
          lv_hsv_color.s = 100;
          lv_hsv_color.v = 100;
          id(lv_soc_color) = lv_color_hsv_to_rgb(lv_hsv_color.h,
            lv_hsv_color.s, lv_hsv_color.v);
      - lvgl.arc.update:
          id: soc_arc
          value: !lambda return soc;
          indicator:
            arc_color: !lambda return id(lv_soc_color);
      - lvgl.label.update:
          id: soc_center_label
          text:
            format: "%d%%"
            args: '(int)(isnan(soc) ? 0 : soc)'
      - lvgl.widget.update:
          id: soc_upper_label
          text_color: !lambda return id(lv_soc_color);

  - id: lvgl_pause
    mode: single
    then:
      - component.suspend: change_tile_interval
      - component.suspend: update_time_interval
      - component.suspend: update_date_interval
      - component.suspend: update_bms_values_interval
      - component.suspend: update_bms_state_interval
      - light.turn_off: backlight
      - lvgl.page.show: blank_page
      - lvgl.widget.hide: header
      - delay: 1s
      - lvgl.pause

  - id: lvgl_resume
    mode: single
    then:
      - if:
          condition:
            lvgl.is_paused
          then:
            - lvgl.resume
            - lvgl.page.show: main_page
            - lvgl.widget.show: header
            - light.turn_on: backlight
            - component.resume: change_tile_interval
            - component.resume: update_time_interval
            - component.resume: update_date_interval
            - component.resume: update_bms_values_interval
            - component.resume: update_bms_state_interval
