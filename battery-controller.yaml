substitutions:
  device_name: battery-controller
  jkbms_tx: GPIO10
  jkbms_rx: GPIO11
  inverter_tx: GPIO42
  inverter_rx: GPIO1
  inverter_fctl: GPIO2

packages:
  device_common: !include .device_common.yaml
  jkbms: !include 
    file: battery-controller/jkbms.yaml
    vars:
      jkbms_tx: ${jkbms_tx}
      jkbms_rx: ${jkbms_rx}
  # jkbms-faker: !include battery-controller/jkbms.faker.yaml
  # powmr: !include
  #   file: battery-controller/powmr.yaml
  #   vars:
  #     inverter_tx: GPIO43
  #     inverter_rx: GPIO44
  lvgl-ui: !include battery-controller/lvgl-ui.yaml
  pace-bms: !include
    file: battery-controller/pace-bms-emulator.yaml
    vars:
      inverter_tx:   ${inverter_tx}
      inverter_rx:   ${inverter_rx}
      inverter_fctl: ${inverter_fctl}

globals:
  - id: inverter_on
    type: bool
    initial_value: 'false'
  - id: current_tile_num
    type: uint8_t
    initial_value: '0'
  - id: is_automatic_tile_change
    type: bool
    initial_value: 'false'
  - id: clr_num
    type: uint8_t
    initial_value: '0'

wifi:
  on_connect:
    - script.execute:
        id: lvgl_update_status_icon
        name: api_connection
        is_on: true
  on_disconnect:
    - script.execute:
        id: lvgl_update_status_icon
        name: api_connection
        is_on: false

esphome:
  name: battery-controller
  friendly_name: battery-controller
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - includes/holding_gpio.h
  on_boot:
    - priority: 800
      then:
        - lambda: |-
            holding_gpio = new HoldingGpio(GPIO_NUM_14);
    - priority: 200
      then:
        - script.execute:
            id: lvgl_update_led
            l_text: !lambda 'return (const char *)(id(contactor_relay).state ? "On" : "Off");'
            l_color: !lambda 'return (id(contactor_relay).state ? id(on_color) : id(off_color));'

esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: quad
  speed: 80MHZ

external_components:
  - source: github://pr#6537
    components: [ io_bus, i80, spi, ili9xxx ]
  - source: github://pr#7184
    components: [ lvgl ]
  - source: github://syssi/esphome-jk-bms@main

logger:
  baud_rate: 0

debug:

sensor:
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
    psram:
      name: "Free PSRAM"
  - platform: internal_temperature
    name: ESP32 Internal temperature
    entity_category: diagnostic

i2c:
  sda: GPIO6
  scl: GPIO5
  id: touch_i2c

touchscreen:
  - platform: ft63x6
    id: touch
    interrupt_pin: GPIO7
    transform:
      swap_xy: true
      mirror_x: true
    on_release:
      - script.execute: lvgl_resume

output:
  - platform: ledc
    id: backlight_pwm
    pin:
      number: GPIO45
      ignore_strapping_warning: true

light:
  - platform: monochromatic
    id: backlight
    output: backlight_pwm
    restore_mode: ALWAYS_ON

i80:
  - id: i80bus
    dc_pin: 
      number: GPIO0
      ignore_strapping_warning: true
    wr_pin: GPIO47
    data_pins:
      - GPIO9
      - number: GPIO46
        ignore_strapping_warning: true
      - number: GPIO3
        ignore_strapping_warning: true
      - GPIO8
      - GPIO18
      - GPIO17
      - GPIO16
      - GPIO15

display:
  - platform: ili9xxx
    model: ST7796
    bus_type: i80
    reset_pin: GPIO4
    pixel_mode: 16bit
    color_order: bgr
    invert_colors: true
    dimensions:
      width: 480
      height: 320
    transform:
      swap_xy: true
    auto_clear_enabled: false

button:
  - id: turn_on_screen
    name: ${device_name} turn on screen
    platform: template
    on_press:
      - script.execute:
          id: lvgl_resume

switch:
  - id: precharge_relay
    platform: gpio
    pin: GPIO21
    internal: true
  - id: contactor_relay
    platform: template
    lambda: 'return holding_gpio->get_state();'
    internal: true
    restore_mode: DISABLED
    turn_on_action:
      - lambda: 'holding_gpio->set_state(1);'
    turn_off_action:
      - lambda: 'holding_gpio->set_state(0);'
  - id: on_switch
    name: ${device_name} contactor switch
    platform: template
    restore_mode: DISABLED
    lambda: 'return id(contactor_relay).state;'
    turn_on_action:
      - script.execute:
          id: turn_on
          precharge: !lambda return !id(inverter_on);
    turn_off_action:
      - script.execute: turn_off

binary_sensor:
  - id: precharge_sensor
    platform: gpio
    pin:
      number: GPIO13
      inverted: true
    internal: true
  - id: precharge_button
    platform: gpio
    pin:
      number: GPIO12
      mode:
        input: true
        pullup: true
      inverted: true
    internal: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      - script.execute: lvgl_resume
    on_multi_click:
      - timing:
          - ON FOR AT LEAST 2S
        then:
          - switch.toggle: on_switch

script:
  - id: turn_off
    mode: single
    then:
      # todo: check whether inverter is off
      - switch.turn_off: contactor_relay
      - script.execute:
          id: lvgl_update_led
          l_text: 'Off'
          l_color: off_color
  - id: turn_on
    mode: single
    parameters:
      precharge: bool
    then:
      - if:
          condition:
            lambda: 'return precharge;'
          then:
            - script.execute:
                id: lvgl_update_led
                l_text: 'Precharging'
                l_color: 0xFFFB00
            - switch.turn_on: precharge_relay
            - wait_until:
                condition:
                  binary_sensor.is_on: precharge_sensor
                timeout: 60s # remove on live
            - switch.turn_on: contactor_relay
            - switch.turn_off: precharge_relay
          else:
            - switch.turn_on: contactor_relay
      - script.execute:
          id: lvgl_update_led
          l_text: 'On'
          l_color: on_color
