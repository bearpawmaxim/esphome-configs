substitutions:
  device_name: battery-controller

packages:
  device_common: !include .device_common.yaml
  jkbms: !include battery-controller/jkbms.yaml
  jkbms-faker: !include battery-controller/jkbms.faker.yaml
  lvgl-ui: !include battery-controller/lvgl-ui.yaml

globals:
  - id: inverter_on
    type: bool
    initial_value: 'false'
  - id: current_tile_num
    type: uint8_t
    initial_value: '0'
  - id: enable_auto_tile_change
    type: bool
    initial_value: 'true'
  - id: is_automatic_tile_change
    type: bool
    initial_value: 'false'

wifi:
  on_connect:
    - script.execute:
        id: lvgl_update_status_icon
        name: api_connection
        is_on: true
  on_disconnect:
    - script.execute:
        id: lvgl_update_status_icon
        name: api_connection
        is_on: false

esphome:
  name: battery-controller
  friendly_name: battery-controller
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - battery-controller/holding_gpio.h
  on_boot:
    - priority: 800
      then:
        - lambda: |-
            holding_gpio = new HoldingGpio(GPIO_NUM_14);
    - priority: 200
      then:
        - script.execute:
            id: lvgl_update_led
            l_text: !lambda 'return (const char *)(id(contactor_relay).state ? "On" : "Off");'
            l_color: !lambda 'return (id(contactor_relay).state ? id(on_color) : id(off_color));'

esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: quad
  speed: 80MHZ

external_components:
  - source: github://pr#6537
    components: [ io_bus, i80, spi, ili9xxx ]
  - source: github://clydebarrow/esphome@lvgl
    components: [ lvgl ]
  - source: github://syssi/esphome-jk-bms@main

logger:

debug:

uart:
  - id: bms_uart
    tx_pin: GPIO10
    rx_pin: GPIO11
    baud_rate: 115200
  - id: inverter_uart
    tx_pin: GPIO42
    rx_pin: GPIO1
    baud_rate: 9600

modbus:
  - id: inverter_modbus
    uart_id: inverter_uart
    flow_control_pin: GPIO2

sensor:
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
    psram:
      name: "Free PSRAM"

i2c:
  sda: GPIO6
  scl: GPIO5
  id: touch_i2c

touchscreen:
  - platform: ft63x6
    id: touch
    interrupt_pin: GPIO7
    transform:
      swap_xy: true
      mirror_x: true
    on_release:
      - script.execute: lvgl_resume

output:
  - platform: ledc
    id: backlight_pwm
    pin:
      number: GPIO45
      ignore_strapping_warning: true

light:
  - platform: monochromatic
    id: backlight
    output: backlight_pwm
    restore_mode: ALWAYS_ON

font:
  - file: battery-controller/SquareDotMatrix.ttf
    id: gauge_font
    bpp: 4
    size: 36
    glyphs: ['0','1','2','3','4','5','6','7','8','9','%',' ']

color:
  - id: color_red
    red: 100%
  - id: color_green
    green: 100%
  - id: off_color
    hex: FF4F00
  - id: on_color
    hex: 58D900

i80:
  - id: i80bus
    dc_pin: 
      number: GPIO0
      ignore_strapping_warning: true
    wr_pin: GPIO47
    data_pins:
      - GPIO9
      - number: GPIO46
        ignore_strapping_warning: true
      - number: GPIO3
        ignore_strapping_warning: true
      - GPIO8
      - GPIO18
      - GPIO17
      - GPIO16
      - GPIO15

display:
  - platform: ili9xxx
    model: ST7796
    bus_type: i80
    reset_pin: GPIO4
    pixel_mode: 16bit
    color_order: bgr
    invert_colors: true
    dimensions:
      width: 480
      height: 320
    transform:
      swap_xy: true
    auto_clear_enabled: false

number:
  - platform: template
    name: Screen timeout
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: 45
    restore_value: true
    min_value: 10
    max_value: 180
    step: 5
    mode: box

interval:
  - interval: 1sec
    startup_delay: 5sec
    then:
      - script.execute: lvgl_update_time
  - interval: 5sec
    startup_delay: 5sec
    then:
      - script.execute: lvgl_change_tile
  - interval: 1min
    startup_delay: 5sec
    then:
      - script.execute: lvgl_update_date

button:
  - id: turn_on_screen
    name: ${device_name} turn on screen
    platform: template
    on_press:
      - script.execute:
          id: lvgl_resume

switch:
  - id: precharge_relay
    platform: gpio
    pin: GPIO21
    internal: true
  - id: contactor_relay
    platform: template
    lambda: 'return holding_gpio->get_state();'
    internal: true
    restore_mode: DISABLED
    turn_on_action:
      - lambda: 'holding_gpio->set_state(1);'
    turn_off_action:
      - lambda: 'holding_gpio->set_state(0);'
  - id: on_switch
    name: ${device_name} contactor switch
    platform: template
    restore_mode: DISABLED
    lambda: 'return id(contactor_relay).state;'
    turn_on_action:
      - script.execute:
          id: turn_on
          precharge: !lambda return !id(inverter_on);
    turn_off_action:
      - script.execute: turn_off

binary_sensor:
  - id: precharge_sensor
    platform: gpio
    pin:
      number: GPIO13
      inverted: true
    internal: true
  - id: precharge_button
    platform: gpio
    pin:
      number: GPIO12
      mode:
        input: true
        pullup: true
      inverted: true
    internal: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      - script.execute: lvgl_resume
    on_multi_click:
      - timing:
          - ON FOR AT LEAST 2S
        then:
          - switch.toggle: on_switch

script:
  - id: lvgl_change_tile
    mode: single
    then:
      - if:
          condition:
            - lambda: 'return id(enable_auto_tile_change);'
          then:
            - globals.set:
                id: is_automatic_tile_change
                value: 'true'
            - globals.set:
                id: current_tile_num
                value: !lambda |-
                  return (id(current_tile_num) + 1) < 5
                    ? id(current_tile_num) + 1
                    : 0;
            - lambda: |-
                lv_obj_set_tile_id(id(stats_tile), id(current_tile_num), 0, LV_ANIM_ON);
            - lambda: 'ESP_LOGE("TILE", "Change end");'
  - id: lvgl_set_active_tile_num
    mode: single
    parameters:
      tile: lv_obj_t*
    then:
      - lambda: |-
          if (tile == id(tile_general_1)) {
            id(current_tile_num) = 0;
          } else if (tile == id(tile_general_2)) {
            id(current_tile_num) = 1;
          } else if (tile == id(tile_switches)) {
            id(current_tile_num) = 2;
          } else if (tile == id(tile_voltages_1)) {
            id(current_tile_num) = 3;
          } else if (tile == id(tile_voltages_2)) {
            id(current_tile_num) = 4;
          }
  - id: lvgl_update_switch_value
    parameters:
      name: string
      value: bool
    mode: queued
    max_runs: 3
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> switch_map {
            { "charge_sw",    id(charge_sw)    },
            { "discharge_sw", id(discharge_sw) },
            { "balance_sw",   id(balance_sw)   }
          };
          auto iterator = switch_map.find(name);
          if (iterator != switch_map.end()) {
            lv_obj_t* sw = iterator->second;
            if (value) {
              lv_obj_add_state(sw, LV_STATE_CHECKED);
            } else {
              lv_obj_clear_state(sw, LV_STATE_CHECKED);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find switch %s", name.c_str());
  - id: lvgl_update_status_icon
    parameters:
      name: string
      is_on: bool
    mode: queued
    max_runs: 3
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> icons_map {
            { "api_connection", id(api_connection) },
            { "bms_connection", id(bms_connection) },
            { "inv_connection", id(inv_connection) }
          };
          auto iterator = icons_map.find(name);
          if (iterator != icons_map.end()) {
            lv_obj_t* icon = iterator->second;
            lv_obj_set_style_text_color(icon, lv_color_from(is_on ? id(on_color) : id(off_color)), (int)LV_STATE_DEFAULT|(int)LV_PART_MAIN);
            lv_event_send(icon, LV_EVENT_VALUE_CHANGED, nullptr);
            return;
          }
          ESP_LOGE("BMS", "Cannot find icon %s", name.c_str());
  - id: lvgl_update_label_value
    parameters:
      name: string
      value: string
    mode: queued
    max_runs: 30
    then:
      - lambda: |-
          static const std::map<std::string, lv_obj_t*> labels_map {
            { "voltage",       id(voltage_value_label) },
            { "current",       id(current_value_label) },
            { "power",         id(power_value_label) },
            { "capacity",      id(capacity_value_label) },
            { "t1",            id(t1_value_label) },
            { "t2",            id(t2_value_label) },
            { "tmos",          id(tmos_value_label) },
            { "cell1voltage",  id(cell1voltage_value_label) },
            { "cell2voltage",  id(cell2voltage_value_label) },
            { "cell3voltage",  id(cell3voltage_value_label) },
            { "cell4voltage",  id(cell4voltage_value_label) },
            { "cell5voltage",  id(cell5voltage_value_label) },
            { "cell6voltage",  id(cell6voltage_value_label) },
            { "cell7voltage",  id(cell7voltage_value_label) },
            { "cell8voltage",  id(cell8voltage_value_label) },
            { "cell9voltage",  id(cell9voltage_value_label) },
            { "cell10voltage", id(cell10voltage_value_label) },
            { "cell11voltage", id(cell11voltage_value_label) },
            { "cell12voltage", id(cell12voltage_value_label) },
            { "cell13voltage", id(cell13voltage_value_label) },
            { "cell14voltage", id(cell14voltage_value_label) },
            { "cell15voltage", id(cell15voltage_value_label) },
            { "cell16voltage", id(cell16voltage_value_label) }
          };
          static const std::map<std::string, lv_obj_t*> unit_labels_map {
            { "voltage",       id(voltage_unit_label) },
            { "current",       id(current_unit_label) },
            { "power",         id(power_unit_label) },
            { "capacity",      id(capacity_unit_label) },
            { "t1",            id(t1_unit_label) },
            { "t2",            id(t2_unit_label) },
            { "tmos",          id(tmos_unit_label) },
            { "cell1voltage",  id(cell1voltage_unit_label) },
            { "cell2voltage",  id(cell2voltage_unit_label) },
            { "cell3voltage",  id(cell3voltage_unit_label) },
            { "cell4voltage",  id(cell4voltage_unit_label) },
            { "cell5voltage",  id(cell5voltage_unit_label) },
            { "cell6voltage",  id(cell6voltage_unit_label) },
            { "cell7voltage",  id(cell7voltage_unit_label) },
            { "cell8voltage",  id(cell8voltage_unit_label) },
            { "cell9voltage",  id(cell9voltage_unit_label) },
            { "cell10voltage", id(cell10voltage_unit_label) },
            { "cell11voltage", id(cell11voltage_unit_label) },
            { "cell12voltage", id(cell12voltage_unit_label) },
            { "cell13voltage", id(cell13voltage_unit_label) },
            { "cell14voltage", id(cell14voltage_unit_label) },
            { "cell15voltage", id(cell15voltage_unit_label) },
            { "cell16voltage", id(cell16voltage_unit_label) }
          };
          auto label_it = labels_map.find(name);
          if (label_it != labels_map.end()) {
            lv_obj_t* value_label = label_it->second;
            lv_label_set_text(value_label, value.c_str());
            lv_event_send(value_label, LV_EVENT_VALUE_CHANGED, nullptr);
            auto units_it = unit_labels_map.find(name);
            if (units_it != labels_map.end()) {
              lv_obj_t* unit_label = units_it->second;
              lv_obj_align_to(unit_label, value_label, LV_ALIGN_OUT_RIGHT_TOP, 3, 0);
            }
            return;
          }
          ESP_LOGE("BMS", "Cannot find label %s", name.c_str());
  - id: lvgl_update_time
    then:
      lvgl.label.update:
        id: header_time
        text: !lambda |-
          if (!id(sntp_time->now()).is_valid()) {
            return "--:--:--";
          }
          static char time_buf[17];
          auto time = id(sntp_time).now();
          snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", time.hour, time.minute, time.second);
          return time_buf;
  - id: lvgl_update_date
    then:
      lvgl.label.update:
        id: header_date
        text: !lambda |-
          static const char* const mon_names[] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
          static char date_buf[16];
          auto now = id(sntp_time).now();
          snprintf(date_buf, sizeof(date_buf), "%s %02d, %d", mon_names[now.month-1], now.day_of_month, now.year);
          return date_buf;
  - id: lvgl_update_error_label
    parameters:
      error: string
    then:
      - if:
          condition:
            lambda: return !error.empty();
          then:
            - lvgl.widget.show: bms_errors_label
            - lvgl.label.update:
                id: bms_errors_label
                text: !lambda return error.c_str();
          else:
            - lvgl.widget.hide: bms_errors_label
  - id: lvgl_update_soc
    parameters:
      soc: float
    then:
      - lvgl.arc.update:
          id: soc_arc
          value: !lambda return soc;
          indicator:
            arc_color: !lambda |-
              lv_color_hsv_t lv_hsv_color = {};
              lv_hsv_color.h = soc;
              lv_hsv_color.s = 100;
              lv_hsv_color.v = 100;
              return lv_color_hsv_to_rgb(lv_hsv_color.h, lv_hsv_color.s, lv_hsv_color.v);
      - lvgl.label.update:
          id: soc_label
          text:
            format: "%d%%"
            args: (int)soc
  - id: lvgl_pause
    mode: single
    then:
      - light.turn_off: backlight
      - lvgl.page.show: blank_page
      - lvgl.widget.hide: header
      - delay: 1s
      - lvgl.pause
      - globals.set:
          id: enable_auto_tile_change
          value: 'false'
  - id: lvgl_resume
    mode: single
    then:
      - if:
          condition:
            lvgl.is_paused
          then:
            - lvgl.resume
            - lvgl.page.show: main_page
            - lvgl.widget.show: header
            - light.turn_on: backlight
            - globals.set:
                id: enable_auto_tile_change
                value: 'true'
  - id: lvgl_update_led
    mode: single
    parameters:
      l_text: string
      l_color: esphome::Color
    then:
      - lvgl.label.update:
          id: status_label
          text: !lambda return l_text.c_str();
      - lvgl.led.update:
          id: status_led
          color: !lambda |-
            return lv_color_make(l_color.red, 
              l_color.green, l_color.blue);
  - id: turn_off
    mode: single
    then:
      - switch.turn_off: contactor_relay
      - script.execute:
          id: lvgl_update_led
          l_text: 'Off'
          l_color: off_color
  - id: turn_on
    mode: single
    parameters:
      precharge: bool
    then:
      - if:
          condition:
            lambda: 'return precharge;'
          then:
            - script.execute:
                id: lvgl_update_led
                l_text: 'Precharging'
                l_color: 0xFFFB00
            - switch.turn_on: precharge_relay
            - wait_until:
                condition:
                  binary_sensor.is_on: precharge_sensor
                timeout: 60s # remove on live
            - switch.turn_on: contactor_relay
            - switch.turn_off: precharge_relay
          else:
            - switch.turn_on: contactor_relay
      - script.execute:
          id: lvgl_update_led
          l_text: 'On'
          l_color: on_color
