globals:
  - id: bms_version_info
    type: std::string
    initial_value: '"JKPaceBms"'
  - id: bms_serial_num
    type: std::string
    initial_value: '"JKPaceBmsSN001"'
  - id: pack_serial_num
    type: std::string
    initial_value: '"JKPacePackSN001"'

esphome:
  includes:
    - battery-controller/pace_bms_utils.h

uart:
  - id: bms_emul_uart
    tx_pin: ${bms_emul_tx}
    rx_pin: ${bms_emul_rx}
    baud_rate: 9600
    debug:
      direction: BOTH
      dummy_receiver: false
      sequence:
        - lambda: |-
            //UARTDebug::log_hex(direction, bytes, ':');
            if (direction == UART_DIRECTION_TX) {
              std::string res = "";
              size_t len = bytes.size();
              char buf[5];
              for (size_t i = 0; i < len; i++) {
                sprintf(buf, "%02X", bytes[i]);
                res += buf;
              }
              id(jkbms_sent_pace_bytes).publish_state(res);
            }

modbus:
  - id: bms_emul_modbus
    uart_id: bms_emul_uart
    send_wait_time: 200ms
    role: server
    flow_control_pin: ${bms_emul_fctl}

interval:
  - interval: 5sec
    id: update_inverter_state_interval
    then:
      - script.execute:
          id: lvgl_update_status_icon
          name: inv_connection
          is_on: !lambda return id(inverter_on);

text_sensor:
  - platform: template
    id: jkbms_sent_pace_warnings
    name: JKBMS Pace warnings sent
  - platform: template
    id: jkbms_sent_pace_protections
    name: JKBMS Pace protections sent
  - platform: template
    id: jkbms_sent_pace_status
    name: JKBMS Pace status sent
  - platform: template
    id: jkbms_sent_pace_faults
    name: JKBMS Pace faults sent
  - platform: template
    id: jkbms_sent_pace_bytes
    name: JKBMS Pace bytes sent

# TODO: Add ds18b20 ?
number:
  - platform: template
    id: jkbms_fake_env_temp
    min_value: -60
    max_value: 60
    step: 1.0
    unit_of_measurement: "Â°C"
    initial_value: 25
    optimistic: true
  - platform: template
    id: jkbms_low_soc_warning
    min_value: 5
    max_value: 100
    step: 1
    initial_value: 20
    unit_of_measurement: '%'
    optimistic: true

modbus_controller:
  - id: bms_emul_modbus_controller
    address: 0x01
    modbus_id: bms_emul_modbus
    # command_throttle: 200ms
    server_registers:
      - address: 0x00 # Current
        value_type: S_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          return (int16_t)(id(jkbms_current).state * 100);
      - address: 0x01 # Voltage
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          return (uint16_t)(id(jkbms_total_voltage).state * 100);
      - address: 0x02 # SOC
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          return (uint16_t)(id(jkbms_soc).state);
      - address: 0x03 # SOH
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          // Percentage between 4000 and (4000 cycles - current cycles count)
          return (uint16_t)(100 - (id(jkbms_charge_cycles_count).state / 40));
      - <<: !include { file: ../pace-bms-emulator/ampere-hour-value-register.yaml, vars: { addr: 0x04, sensor: jkbms_capacity_remaining_ah } }
      - <<: !include { file: ../pace-bms-emulator/ampere-hour-value-register.yaml, vars: { addr: 0x05, sensor:       jkbms_actual_capacity } }
      - <<: !include { file: ../pace-bms-emulator/ampere-hour-value-register.yaml, vars: { addr: 0x06, sensor:       jkbms_actual_capacity } }
      - address: 0x07 # Charge cycles count
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          return (uint16_t)id(jkbms_charge_cycles_count).state;
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x08 } }
      - address: 0x09 # Warning flags.
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          float max_pack_temp = std::max(
            id(jkbms_bat_temp1).state,
            id(jkbms_bat_temp2).state
          );
          float min_pack_temp = std::min(
            id(jkbms_bat_temp1).state,
            id(jkbms_bat_temp2).state
          );
          bool is_charging = id(jkbms_charging);
          bool is_discharging = id(jkbms_discharging);
          bool cell_overvoltage = id(jkbms_cell_overvoltage_protection).state <=
            id(jkbms_max_cell_voltage).state;
          bool cell_undervoltage = id(jkbms_cell_undervoltage_protection).state >=
            id(jkbms_min_cell_voltage).state;
          bool is_pack_overvoltage = id(jkbms_pack_overvoltage_protection).state <=
            id(jkbms_total_voltage).state;
          bool is_pack_undervoltage = id(jkbms_pack_undervoltage_protection).state >=
            id(jkbms_total_voltage).state;
          bool is_charging_overcurrent = is_charging &&
            id(jkbms_charging_overcurrent_protection).state <= id(jkbms_current).state;
          bool is_discharging_overcurrent = is_discharging &&
            id(jkbms_discharging_overcurrent_protection).state <= std::abs(id(jkbms_current).state);
          bool is_charging_overtemperature = is_charging &&
            max_pack_temp >= id(jkbms_charging_overtemperature_protection).state;
          bool is_discharging_overtemperature = is_discharging &&
            max_pack_temp >= id(jkbms_discharging_overtemperature_protection).state;
          bool is_charging_undertemperature = is_charging &&
            id(jkbms_charging_undertemperature_protection).state >= min_pack_temp;
          bool is_discharging_undertemperature = is_discharging &&
            id(jkbms_discharging_undertemperature_protection).state >= min_pack_temp;
          bool is_mos_overtemperature = id(jkbms_mos_temp).state
            >= id(jkbms_mos_overtemperature_protection).state;
          uint16_t error_bits = id(jkbms_error_bitmask).state;
          bool is_low_soc = error_bits & (1 << 0);
          bool sensors[16] = {
            cell_overvoltage,                // Cell overvoltage warning.
            cell_undervoltage,               // Cell undervoltage warning.
            is_pack_overvoltage,             // Pack overvoltage warning.
            is_pack_undervoltage,            // Pack undervoltage warning.
            is_charging_overcurrent,         // Charging overcurrent warning.
            is_discharging_overcurrent,      // Discharge overcurrent warning.
            false,                           // Reserved. Do not set.
            false,                           // Reserved. Do not set.
            is_charging_overtemperature,     // Charging overtemperature warning.
            is_discharging_overtemperature,  // Discharging overtemperature warning.
            is_charging_undertemperature,    // Charging undertemperature warning.
            is_discharging_undertemperature, // Discharging undertemperature warning.
            false,                           // Environment overtemperature warning.
            false,                           // Environment undertemperature warning.
            is_mos_overtemperature,          // MOSFET overtemperature warning.
            is_low_soc                       // Low SOC warning.
          };
          uint16_t mask = pack_flags16(sensors, 16);
          static const uint8_t WARNINGS_SIZE = 16;
          std::string values = "0b";
          for (int i = 0; i < WARNINGS_SIZE; i++) {
            values.append((mask & (1 << i)) ? "1" : "0");
          }
          id(jkbms_sent_pace_warnings).publish_state(values);
          return mask;
      - address: 0x0A # Protection flags.
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          uint16_t error_bits = id(jkbms_error_bitmask).state;
          bool low_capacity = error_bits & (1 << 0);
          bool mos_overtemperature = error_bits & (1 << 1);
          bool charging_overvoltage = error_bits & (1 << 2);
          bool discharging_undervoltage = error_bits & (1 << 3);
          bool battery_overtemperature = error_bits & (1 << 4);
          bool charging_overcurrent = error_bits & (1 << 5);
          bool discharging_overcurrent = error_bits & (1 << 6);
          bool cell_pressure_difference = error_bits & (1 << 7);
          bool overtemperature_alarm_in_the_battery_box = error_bits & (1 << 8);
          bool battery_undertemperature = error_bits & (1 << 9);
          bool cell_overvoltage = error_bits & (1 << 10);
          bool cell_undervoltage = error_bits & (1 << 11);
          // bool protection_309_A = error_bits & (1 << 12);
          // bool protection_309_B = error_bits & (1 << 13);
          bool is_charging = id(jkbms_charging);
          bool is_discharging = id(jkbms_discharging);
          bool sensors[16] = {
            cell_overvoltage,                           // Cell overvoltage protection.
            cell_undervoltage,                          // Cell undervoltage protection.
            charging_overvoltage,                       // Pack overvoltage protection.
            discharging_undervoltage,                   // Pack undervoltage protection.
            charging_overcurrent,                       // Charging overcurrent protection.
            discharging_overcurrent,                    // Discharging overcurrent protection.
            false,                                      // Short circuit protection.
            false,                                      // Charging overvoltage protection.
            battery_overtemperature && is_charging,     // Charging overtemperature protection.
            battery_overtemperature && is_discharging,  // Discharging overtemperature protection.
            battery_undertemperature && is_charging,    // Charging undertemperature protection.
            battery_undertemperature && is_discharging, // Discharging undertemperature protection.
            mos_overtemperature,                        // MOSFET overtemperature protection.
            false,                                      // Environment overtemperature protection.
            false,                                      // Environment undertemperature protection.
            false,                                      // Reserved. Do not set.
          };
          uint16_t mask = pack_flags16(sensors, 16);
          static const uint8_t PROTECTIONS_SIZE = 16;
          std::string values = "0b";
          for (int i = 0; i < PROTECTIONS_SIZE; i++) {
            values.append((mask & (1 << i)) ? "1" : "0");
          }
          id(jkbms_sent_pace_protections).publish_state(values);
          return mask;
      - address: 0x0B # Fault/status flags.
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          uint16_t error_bits = id(jkbms_error_bitmask).state;
          bool cell_pressure_difference = error_bits & (1 << 7);
          float current = id(jkbms_current).state;
          bool is_zero_current = std::abs(current) > 0;
          bool is_charging_en = id(jkbms_charging);
          bool is_charging = !is_zero_current && is_charging_en && current > 0;
          bool is_discharging_en = id(jkbms_discharging);
          bool is_discharging = !is_zero_current && is_discharging_en && current < 0;
          bool sensors[16] = {
            // Faults
            false,                              // Charge MOSFET fault.
            false,                              // Discharge MOSFET fault.
            false,                              // Temperature sensor fault.
            false,                              // Reserved. Do not set.
            cell_pressure_difference,           // Cell fault.
            false,                              // Sample communications fault.
            false,                              // Reserved. Do not set.
            false,                              // Reserved. Do not set.
            // Statuses
            is_charging,                        // Charging.
            is_discharging,                     // Discharging.
            id(jkbms_charging_switch).state,           // Charging enabled.
            id(jkbms_discharging_switch).state,        // Discharging enabled.
            false,                              // Charging current limit.
            false,                              // Reserved. Do not set.
            false,                              // Charger inverted.
            false                               // Heating.
          };
          uint16_t mask = pack_flags16(sensors, 16);
          static const uint8_t FAULTS_SIZE = 8;
          std::string values = "0b";
          for (int i = 0; i < FAULTS_SIZE; i++) {
            values.append((mask & (1 << i)) ? "1" : "0");
          }
          id(jkbms_sent_pace_faults).publish_state(values);
          values = "0b";
          static const uint8_t STATUS_SIZE = 8;
          for (int i = 8; i < (STATUS_SIZE+8); i++) {
            values.append((mask & (1 << i)) ? "1" : "0");
          }
          id(jkbms_sent_pace_status).publish_state(values);
          return mask;
      - address: 0x0C # Balance status bits per cell.
        value_type: U_WORD
        read_lambda: |-
          if (!id(inverter_on)) {
            id(inverter_on) = true;
          }
          uint16_t balancing_cells = 0;
          if (id(jkbms_balancing).state) {
            // min and max voltage cells sensors are 1-based.
            uint8_t min_cell_num = id(jkbms_min_voltage_cell).state - 1;
            balancing_cells |= (1 << min_cell_num);
            uint8_t max_cell_num = id(jkbms_max_voltage_cell).state - 1;
            balancing_cells |= (1 << max_cell_num);
          }
          return balancing_cells;
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x0D } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x0E } }
      # Cell voltages
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x0F, sensor:  jkbms_cell_voltage_1 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x10, sensor:  jkbms_cell_voltage_2 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x11, sensor:  jkbms_cell_voltage_3 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x12, sensor:  jkbms_cell_voltage_4 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x13, sensor:  jkbms_cell_voltage_5 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x14, sensor:  jkbms_cell_voltage_6 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x15, sensor:  jkbms_cell_voltage_7 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x16, sensor:  jkbms_cell_voltage_8 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x17, sensor:  jkbms_cell_voltage_9 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x18, sensor: jkbms_cell_voltage_10 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x19, sensor: jkbms_cell_voltage_11 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x1A, sensor: jkbms_cell_voltage_12 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x1B, sensor: jkbms_cell_voltage_13 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x1C, sensor: jkbms_cell_voltage_14 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x1D, sensor: jkbms_cell_voltage_15 } }
      - <<: !include { file: ../pace-bms-emulator/cell-voltage-value-register.yaml, vars: { addr: 0x1E, sensor: jkbms_cell_voltage_16 } }
      # Temperature sensors
      - <<: !include { file: ../pace-bms-emulator/temperature-value-register.yaml, vars: { addr: 0x1F, sensor:     jkbms_bat_temp1 } }
      - <<: !include { file: ../pace-bms-emulator/temperature-value-register.yaml, vars: { addr: 0x20, sensor:     jkbms_bat_temp2 } }
      - <<: !include { file: ../pace-bms-emulator/temperature-value-register.yaml, vars: { addr: 0x21, sensor:     jkbms_bat_temp1 } }
      - <<: !include { file: ../pace-bms-emulator/temperature-value-register.yaml, vars: { addr: 0x22, sensor:     jkbms_bat_temp2 } }
      - <<: !include { file: ../pace-bms-emulator/temperature-value-register.yaml, vars: { addr: 0x23, sensor:      jkbms_mos_temp } }
      - <<: !include { file: ../pace-bms-emulator/temperature-value-register.yaml, vars: { addr: 0x24, sensor: jkbms_fake_env_temp } }
      # Reserved
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x25 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x26 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x27 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x28 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x29 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x2A } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x2B } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x2C } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x2D } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x2E } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x2F } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x30 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x31 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x32 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x33 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x34 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x35 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x36 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x37 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x38 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x39 } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x3A } }
      - <<: !include { file: ../pace-bms-emulator/dummy-zero-register.yaml, vars: { addr: 0x3B } }
      # Version information registers (20 bytes)
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x96, str_var: bms_version_info, offset:  0 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x97, str_var: bms_version_info, offset:  2 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x98, str_var: bms_version_info, offset:  4 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x99, str_var: bms_version_info, offset:  6 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x9A, str_var: bms_version_info, offset:  8 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x9B, str_var: bms_version_info, offset: 10 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x9C, str_var: bms_version_info, offset: 12 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x9D, str_var: bms_version_info, offset: 14 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x9E, str_var: bms_version_info, offset: 16 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0x9F, str_var: bms_version_info, offset: 18 } }
      # BMS SN information (20 bytes)
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA0, str_var:   bms_serial_num, offset:  0 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA1, str_var:   bms_serial_num, offset:  2 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA2, str_var:   bms_serial_num, offset:  4 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA3, str_var:   bms_serial_num, offset:  6 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA4, str_var:   bms_serial_num, offset:  8 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA5, str_var:   bms_serial_num, offset: 10 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA6, str_var:   bms_serial_num, offset: 12 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA7, str_var:   bms_serial_num, offset: 14 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA8, str_var:   bms_serial_num, offset: 16 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xA9, str_var:   bms_serial_num, offset: 18 } }
      # PACK SN information (20 bytes)
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xAA, str_var:  pack_serial_num, offset:  0 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xAB, str_var:  pack_serial_num, offset:  2 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xAC, str_var:  pack_serial_num, offset:  4 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xAD, str_var:  pack_serial_num, offset:  6 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xAE, str_var:  pack_serial_num, offset:  8 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xAF, str_var:  pack_serial_num, offset: 10 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xB0, str_var:  pack_serial_num, offset: 12 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xB1, str_var:  pack_serial_num, offset: 14 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xB2, str_var:  pack_serial_num, offset: 16 } }
      - <<: !include { file: ../pace-bms-emulator/string-part-value-register.yaml, vars: { addr: 0xB3, str_var:  pack_serial_num, offset: 18 } }
