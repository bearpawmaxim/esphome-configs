globals:
  - id: intensity_red
    type: int
    restore_value: no
    initial_value: '.28'
  - id: intensity_green
    type: int
    restore_value: no
    initial_value: '.82'
  - id: intensity_blue
    type: int
    restore_value: no
    initial_value: '1'
  - id: target_brightness
    type: float
    restore_value: no
    initial_value: '.8'
  - id: brightness_step
    type: float
    restore_value: no
    initial_value: '.05'

esphome:
  name: lobby-led-light
  platform: ESP32
  board: esp32doit-devkit-v1
  on_boot:
    priority: 300.0
    then:
      - light.turn_on:
          id: lobbyledlight
          brightness: 1%
          red: !lambda |-
            return id(intensity_red);
          green: !lambda |-
            return id(intensity_green);
          blue: !lambda |-
            return id(intensity_blue);
          effect: "Fade in"
      - delay: 10s
      - light.turn_on:
          id: lobbyledlight
          brightness: !lambda |-
            return id(target_brightness);
          red: !lambda |-
            return id(intensity_red);
          green: !lambda |-
            return id(intensity_green);
          blue: !lambda |-
            return id(intensity_blue);
          effect: "Flicker"

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "8ff11faff19373c6b5a20dd90525edcf"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lobby-Led-Light"
    password: "OUHtZnl5EiUP"

captive_portal:

light:
  - platform: fastled_clockless
    id: lobbyledlight
    chipset: WS2812B
    pin: GPIO13
    num_leds: 300
    rgb_order: GRB
    name: "Lobby Led Light"
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - lambda:
          name: "Fade in"
          update_interval: 25ms
          lambda: |-
            float current_brightness = lobbyledlight->current_values.get_brightness();
            auto call = lobbyledlight->make_call();
            if (current_brightness <= target_brightness->value()) {
              current_brightness += brightness_step->value();
              call.set_brightness(current_brightness);
              call.set_transition_length(0);
              call.set_publish(false);
              call.set_save(false);
              call.perform();
            }
      - flicker:
          name: "Flicker"
          alpha: 80%
          intensity: 2.5%
      - random:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:


time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Kiev

sun:
  latitude: 50.391968°
  longitude: 30.557317°
  on_sunrise:
    - then:
      - lambda: |-
          id(intensity_red) = 1;
          id(intensity_green) = 1;
          id(intensity_blue) = 0;
      - light.turn_on:
          id: lobbyledlight
          brightness: !lambda |-
            return id(target_brightness);
          red: !lambda |-
            return id(intensity_red);
          green: !lambda |-
            return id(intensity_green);
          blue: !lambda |-
            return id(intensity_blue);
          effect: none
  on_sunset:
    - then:
      - lambda: |-
          id(intensity_red) = .28;
          id(intensity_green) = .82;
          id(intensity_blue) = 1;
      - light.turn_on:
          id: lobbyledlight
          brightness: !lambda |-
            return id(target_brightness);
          red: !lambda |-
            return id(intensity_red);
          green: !lambda |-
            return id(intensity_green);
          blue: !lambda |-
            return id(intensity_blue);
          effect: none