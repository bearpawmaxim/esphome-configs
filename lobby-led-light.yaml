globals:
  - id: intensity_red
    type: float
    restore_value: no
    initial_value: '0'
  - id: intensity_green
    type: float
    restore_value: no
    initial_value: '0'
  - id: intensity_blue
    type: float
    restore_value: no
    initial_value: '0'
  # moon/sun color, 1-1-1 for sun.
  - id: luminary_red
    type: float
    restore_value: no
    initial_value: '1'
  - id: luminary_green
    type: float
    restore_value: no
    initial_value: '0.88'
  - id: luminary_blue
    type: float
    restore_value: no
    initial_value: '0'

substitutions:
  device_name: lobby-led-light
  latitude: !secret gps_latitude_str
  longitude: !secret gps_longitude_str
  elevation: !secret gps_elevation_str

packages:
  device_common: !include .device_common.yaml

esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32doit-devkit-v1
  includes:
    - includes/led_rect_effect.h
    - includes/luminary_effect.h
  libraries:
    - marscaper/Ephemeris
  on_boot:
    priority: 300.0
    then:
      - script.execute: turn_on_light
      - lambda: |-
          //Ephemeris::setLocationOnEarth(latitude, longitude);
          //Ephemeris::flipLongitude(true);
          //Ephemeris::setAltitude(elevation);
          LuminaryEffect::setup_effect(${latitude}, ${longitude}, ${elevation});

number:
  - platform: template
    id: wheel_angle
    name: Wheel angle
    mode: slider
    min_value: 0
    max_value: 360
    step: 1
    optimistic: true
  - platform: template
    id: led_num
    name: Led number
    mode: slider
    min_value: 0
    max_value: 300
    step: 1
    optimistic: true

light:
  - platform: fastled_clockless
    id: lobbyledlight
    chipset: WS2812B
    pin: GPIO13
    num_leds: 300
    rgb_order: GRB
    name: "Lobby Led Light"
    restore_mode: ALWAYS_OFF
    default_transition_length: 1500ms
    effects:
      - flicker:
          name: flicker
          alpha: 95%
          intensity: 1.5%
      - addressable_rainbow:
      - addressable_lambda:
          name: "LedRect auto wheel effect"
          update_interval: 20ms
          lambda: |-
            static int16_t angle = 0;

            uint8_t red = to_uint8_scale(id(intensity_red));
            uint8_t green = to_uint8_scale(id(intensity_green));
            uint8_t blue = to_uint8_scale(id(intensity_blue));
            Color background_color = Color(red, green, blue);

            uint8_t effect_red = to_uint8_scale(id(luminary_red));
            uint8_t effect_green = to_uint8_scale(id(luminary_green));
            uint8_t effect_blue = to_uint8_scale(id(luminary_blue));
            Color effect_color = Color(effect_red, effect_green, effect_blue);

            it.all().set(background_color);
            LedRectEffect::set_effect(it, effect_color, angle);

            angle += 1;
            if (angle > 360) {
              angle -= 360;
            }
      - addressable_lambda:
          name: "LedRect manual wheel effect"
          update_interval: 20ms
          lambda: |-
            uint16_t angle = static_cast<uint16_t>(id(wheel_angle).state);

            uint8_t red = to_uint8_scale(id(intensity_red));
            uint8_t green = to_uint8_scale(id(intensity_green));
            uint8_t blue = to_uint8_scale(id(intensity_blue));
            Color background_color = Color(red, green, blue);

            uint8_t effect_red = to_uint8_scale(id(luminary_red));
            uint8_t effect_green = to_uint8_scale(id(luminary_green));
            uint8_t effect_blue = to_uint8_scale(id(luminary_blue));
            Color effect_color = Color(effect_red, effect_green, effect_blue);

            it.all().set(background_color);
            LedRectEffect::set_effect(it, effect_color, angle);
      - addressable_lambda:
          name: "Set individual led"
          update_interval: 20ms
          lambda: |-
            uint16_t num = static_cast<uint16_t>(id(led_num).state);

            uint8_t red = to_uint8_scale(id(intensity_red));
            uint8_t green = to_uint8_scale(id(intensity_green));
            uint8_t blue = to_uint8_scale(id(intensity_blue));
            Color background_color = Color(red, green, blue);

            it.all().set(background_color);
            it[num] = Color(255, 0, 0);
      - addressable_lambda:
          name: "Moon/sun location"
          update_interval: 60s
          lambda: |-
            uint8_t red = to_uint8_scale(id(intensity_red));
            uint8_t green = to_uint8_scale(id(intensity_green));
            uint8_t blue = to_uint8_scale(id(intensity_blue));
            Color background_color = Color(red, green, blue);

            uint8_t effect_red = to_uint8_scale(id(luminary_red));
            uint8_t effect_green = to_uint8_scale(id(luminary_green));
            uint8_t effect_blue = to_uint8_scale(id(luminary_blue));
            Color effect_color = Color(effect_red, effect_green, effect_blue);

            ESPTime time = id(sntp_time)->now();
            LuminaryEffect::do_effect(time, it, background_color, effect_color);

time:
  - id: !extend sntp_time
    on_time_sync:
      then:
        - script.execute: set_daylight_color

sun:
  id: sun_id
  latitude: !secret gps_latitude
  longitude: !secret gps_longitude
  on_sunrise:
    then:
      - script.execute: set_daylight_color
  on_sunset:
    then:
      - script.execute: set_daylight_color

script:
  - id: turn_on_light
    then:
      - light.turn_on:
          id: lobbyledlight
          brightness: 80%
          red: 1
          green: 1
          blue: 1
          effect: none
  - id: set_light_color
    then:
      - light.control:
          id: lobbyledlight
          red: !lambda |-
            return id(intensity_red);
          green: !lambda |-
            return id(intensity_green);
          blue: !lambda |-
            return id(intensity_blue);
          transition_length: 1000ms
  - id: set_daylight_color
    then:
      - script.wait: turn_on_light
      - if:
          condition:
            sun.is_above_horizon
          then:
            - globals.set:
                id: intensity_red
                value: '1.0'
            - globals.set:
                id: intensity_green
                value: '.67'
            - globals.set:
                id: intensity_blue
                value: '.11'
            - globals.set:
                id: luminary_red
                value: '1.0'
            - globals.set:
                id: luminary_green
                value: '1.0'
            - globals.set:
                id: luminary_blue
                value: '1.0'
          else:
            - globals.set:
                id: intensity_red
                value: '.0'
            - globals.set:
                id: intensity_green
                value: '1.0'
            - globals.set:
                id: intensity_blue
                value: '1.0'
      - script.execute: set_light_color
