uart:
  - id: bms_uart
    baud_rate: 2400
    rx_pin: ${rx_pin}
    debug:
      direction: BOTH

jk_bms_display:
  - id: jkbms0
    uart_id: bms_uart

binary_sensor:
  - platform: jk_bms_display
    system_warning:
      id: jkbms_system_warn
      name: "JKBMS system warning"
      internal: true
    balancing_switch:
      id: jkbms_balancing_switch
      name: "JKBMS balancing switch"
    charging:
      id: jkbms_charging
      name: "JKBMS charging"
    discharging:
      id: jkbms_discharging
      name: "JKBMS discharging"
    cell_voltage_undervoltage_protection:
      id: jkbms_cell_uvp
      name: "JKBMS cell voltage undervoltage protection"
      internal: true
    cell_voltage_overvoltage_protection:
      id: jkbms_cell_ovp
      name: "JKBMS cell voltage overvoltage protection"
      internal: true
    overcurrent_protection:
      id: jkbms_ocp
      name: "JKBMS overcurrent protection"
      internal: true
    mosfet_overtemperature_protection:
      id: jkbms_mos_otp
      name: "JKBMS mosfet overtemperature protection"
      internal: true
    battery_temperature_protection:
      id: jkbms_batt_tp
      name: "JKBMS battery temperature protection"
      internal: true
    short_circuit_protection:
      id: jkbms_scp
      name: "JKBMS short circuit protection"
      internal: true
    coprocessor_communication_error:
      id: jkbms_cocpu_comm_err
      name: "JKBMS coprocessor communication error"
      internal: true
    balancer_wire_resistance_too_high:
      id: jkbms_high_wire_res
      name: "JKBMS balancer wire resistance too high"
      internal: true
    cell_count_mismatch:
      id: jkbms_cell_cnt_mismatch
      name: "JKBMS cell count mismatch"
      internal: true
  - platform: template
    id: jkbms_has_alarms
    name: "JKBMS has alarms"
    lambda: |-
      return id(jkbms_system_warn)->state ||
        id(jkbms_cell_uvp)->state ||
        id(jkbms_cell_ovp)->state ||
        id(jkbms_ocp)->state ||
        id(jkbms_mos_otp)->state ||
        id(jkbms_batt_tp)->state ||
        id(jkbms_scp)->state ||
        id(jkbms_cocpu_comm_err)->state ||
        id(jkbms_high_wire_res)->state ||
        id(jkbms_cell_cnt_mismatch)->state;

sensor:
  - platform: jk_bms_display
    total_voltage:
      id: jkbms_voltage
      name: "JKBMS total voltage"
      on_value:
        - globals.set:
            id: voltage
            value: !lambda return x;
    current:
      id: jkbms_current
      name: "JKBMS current"
      on_value:
        - globals.set:
            id: current
            value: !lambda return x;
    power:
      id: jkbms_power
      name: "JKBMS power"
      on_value:
        - globals.set:
            id: power
            value: !lambda return x;
    min_cell_voltage:
      id: jkbms_min_cell_voltage
      name: "JKBMS min cell voltage"
      on_value:
        - globals.set:
            id: min_cell_voltage
            value: !lambda return x;
    max_cell_voltage:
      id: jkbms_max_cell_voltage
      name: "JKBMS max cell voltage"
      on_value:
        - globals.set:
            id: max_cell_voltage
            value: !lambda return x;
    state_of_charge:
      id: jkbms_soc
      name: "JKBMS state of charge"
      on_value:
        - globals.set:
            id: soc
            value: !lambda return x;
    mosfet_temperature:
      id: jkbms_mosfet_temp
      name: "JKBMS mosfet temperature"
      on_value:
        - globals.set:
            id: mos_temp
            value: !lambda return x;
    battery_temperature:
      id: jkbms_battery_temp
      name: "JKBMS battery temperature"
      on_value:
        - globals.set:
            id: cell_temp
            value: !lambda return x;

# text_sensor:
 #  - platform: template
 #    id: jkbms_alarms
 #    update_interval: never
 #    lambda: |-
 #      return ""; //todo
