substitutions:
  inverter_voltage_offset: "0"
  update_interval: 30s # Minimum 10s recommended to avoid duplicate command errors
  select_skip_updates: "2"

esphome:
  includes:
    - battery-controller/powmr_utils.h

uart:
  - id: inverter_uart
    tx_pin: inverter_tx
    rx_pin: inverter_rx
    baud_rate: 9600

modbus:
  - id: inverter_modbus
    uart_id: inverter_uart
    send_wait_time: 250ms

modbus_controller:
  - id: inverter_modbus_controller
    address: 0x05
    modbus_id: inverter_modbus
    setup_priority: -10
    offline_skip_updates: 100
    command_throttle: 1s
    update_interval: ${update_interval}

interval:
  - interval: 5sec
    id: update_inverter_state_interval
    then:
      - lambda: |-
          id(inverter_on) = !id(inverter_modbus_controller)->
            get_module_offline();
      - script.execute:
          id: lvgl_update_status_icon
          name: inv_connection
          is_on: !lambda return id(inverter_on);

sensor:
  ###################################
  # Read first group (44 registers) #
  ###################################
  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Grid Voltage"
    address: 4502
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      // if (!id(grid_active).state) {
      //   return 0.0;
      // }
      return swap_bytes(x);
    filters:
      - multiply: 0.1
      - offset: ${inverter_voltage_offset}
      - heartbeat: 10s
    # on_raw_value:
    #   then:
    #     - lambda: !lambda |-
    #         if (!id(grid_active).state) {
    #           id(pzem_grid_voltage).publish_state(0.0);
    #           id(pzem_grid_current).publish_state(${pzem_current_offset} * -1);
    #           id(pzem_grid_power).publish_state(0.0);
    #           id(pzem_grid_power_factor).publish_state(0.0);
    #         }

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Grid Frequency"
    address: 4503
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR PV Voltage"
    id: powmr_pv_voltage
    address: 4504
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR PV Power"
    id: powmr_pv_power
    address: 4505
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);

  - platform: template
    name: "POWMR PV Current"
    id: powmr_pv_current
    state_class: "measurement"
    device_class: current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    icon: mdi:solar-power
    lambda: |-
      return id(powmr_pv_power).state / id(powmr_pv_voltage).state;

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Voltage"
    id: powmr_battery_voltage
    address: 4506
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    lambda: |-
      return swap_bytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery SoC"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: battery
    address: 4507
    register_type: holding
    value_type: U_WORD
    state_class: measurement
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Charge Current"
    id: powmr_battery_charge_current
    address: 4508
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Discharge Current"
    id: powmr_battery_discharge_current
    address: 4509
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);

  - platform: template
    name: "POWMR Battery Current"
    id: powmr_battery_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    update_interval: ${update_interval}
    lambda: |-
      return id(powmr_battery_charge_current).state - id(powmr_battery_discharge_current).state;
    filters:
      - heartbeat: 10s

  - platform: template
    name: "POWMR Battery Power"
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${update_interval}
    lambda: |-
      return id(powmr_battery_current).state * id(powmr_battery_voltage).state;

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Load Voltage"
    id: powmr_load_voltage
    address: 4510
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Load Frequency"
    address: 4511
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      return swap_bytes(x);
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Load Power Internal"
    id: powmr_load_power_internal
    internal: true
    address: 4512
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swap_bytes(x);

  - platform: template
    name: "POWMR Load Power"
    id: powmr_load_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      return id(powmr_load_current).state * id(powmr_load_voltage).state;

  - platform: template
    name: "POWMR Load Current"
    id: powmr_load_current
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 3
    update_interval: ${update_interval}
    lambda: |-
      if (id(powmr_load_voltage).state == 0) {
        return 0;
      }
      return id(powmr_load_va).state / id(powmr_load_voltage).state;

  - platform: template
    name: "POWMR Load Power Factor"
    id: powmr_load_power_factor
    device_class: power_factor
    state_class: measurement
    accuracy_decimals: 2
    update_interval: ${update_interval}
    lambda: |-
      if (id(powmr_load_va).state == 0) {
        return 0;
      }
      return id(powmr_load_power).state / id(powmr_load_va).state;

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Load VA"
    id: powmr_load_va
    address: 4513
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "VA"
    device_class: apparent_power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Load Percent"
    address: 4514
    register_count: 21
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: power_factor
    state_class: measurement
    lambda: |-
      return swap_bytes(x);

  # 4535 -> binary

  # 4536 -> text

  # 4537 -> text

  # 4538 -> text

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Target Output Frequency"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4540
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    lambda: |-
      uint16_t value = swap_bytes(x);
      switch (value) {
        case 0: return std::uint16_t(50);
        case 1: return std::uint16_t(60);
        default: return x;
      }

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Max Total Charging Current"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4541
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Target Output Voltage"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4542
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Max Utility Charging Current"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4543
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Back To Utility Source Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4544
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Back To Battery Source Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4545
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  # ####################################
  # # Read second group (16 registers) #
  # ####################################

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Bulk Charging Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4546
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Floating Charging Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4547
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Low CutOff Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4548
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Equalization Voltage"
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    entity_category: diagnostic
    address: 4549
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Equalized Time"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4550
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Equalized Timeout"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4551
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swap_bytes(x);

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Equalization Interval"
    accuracy_decimals: 0
    entity_category: diagnostic
    address: 4552
    register_type: holding
    value_type: U_WORD
    lambda: |-
      return swap_bytes(x);

  # 4553 -> binary

  # 4554 -> binary

  # 4555 -> text

binary_sensor:

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Record Fault Code"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x1

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Battery Equalization"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x2

#  - platform: modbus_controller
#    modbus_controller_id: inverter_modbus_controller
#    name: "Equalization Activated Immediately"
#    entity_category: diagnostic
#    address: 4535
#    register_type: holding
#    bitmask: 0x4

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Alarm"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x100

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Backlight"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x400

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Restart On Overload"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x800

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Restart On Overheat"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x1000

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Beep On Primary Source Fail"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x2000

  # - platform: modbus_controller
  #   modbus_controller_id: inverter_modbus_controller
  #   name: "Return To Default Screen"
  #   entity_category: diagnostic
  #   address: 4535
  #   register_type: holding
  #   bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Overload Bypass"
    entity_category: diagnostic
    address: 4535
    register_type: holding
    bitmask: 0x8000

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Load Enabled"
    address: 4553
    register_type: holding
    bitmask: 0x4000

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Grid Active"
    id: powmr_grid_active
    address: 4554
    register_type: holding
    bitmask: 0x8000

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR On Battery"
    address: 4554
    register_type: holding
    bitmask: 0x1

text_sensor:

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    id: powmr_charger_source_priority_text
    name: "POWMR Charger Source Priority"
    entity_category: diagnostic
    address: 4536
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swap_bytes(modbus_controller::word_from_hex_str(x, 0));
      update_select_value(sensorIndex, id(powmr_charger_source_priority_select));
      switch (sensorIndex) {
        case 0: return std::string("Utility first");
        case 1: return std::string("Solar first");
        case 2: return std::string("Solar and Utility");
        case 3: return std::string("Only solar");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Output Source Priority"
    entity_category: diagnostic
    address: 4537
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swap_bytes(modbus_controller::word_from_hex_str(x, 0));
      update_select_value(sensorIndex, id(powmr_output_source_priority_select));
      switch (sensorIndex) {
        case 0: return std::string("Utility first (USB)");
        case 1: return std::string("Solar first (SUB)");
        case 2: return std::string("SBU priority");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR AC Input Voltage Range"
    entity_category: diagnostic
    address: 4538
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = swap_bytes(modbus_controller::word_from_hex_str(x, 0));
      switch (value) {
        case 0: return std::string("Appliances");
        case 1: return std::string("UPS");
        default: return std::string(x);
      }

  - platform: modbus_controller
    modbus_controller_id: inverter_modbus_controller
    name: "POWMR Charger Status"
    address: 4555
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t sensorIndex = swap_bytes(modbus_controller::word_from_hex_str(x, 0));
      switch (sensorIndex) {
        case 0: return std::string("Off");
        case 1: return std::string("Idle");
        case 2: return std::string("Charging");
        default: return std::string(x);
      }

select:
  - platform: modbus_controller
    name: "POWMR Buzzer Alarm"
    optimistic: true
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5002
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1

  - platform: modbus_controller
    name: "POWMR Beep On Primary Source Fail"
    optimistic: true
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5007
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1

  - platform: modbus_controller
    name: "POWMR Overload Bypass"
    optimistic: true
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5009
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1

  - platform: modbus_controller
    id: powmr_charger_source_priority_select
    name: "POWMR Charger Source Priority"
    optimistic: true
    skip_updates: ${select_skip_updates}
    force_new_range: true
    entity_category: config
    address: 5017
    value_type: U_WORD
    optionsmap:
      "Utility first": 0
      "Solar first": 1
      "Solar and Utility": 2
      "Only Solar": 3

  - platform: modbus_controller
    id: powmr_output_source_priority_select
    name: "POWMR Output Source Priority"
    optimistic: true
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5018
    value_type: U_WORD
    optionsmap:
      "Utility first (USB)": 0
      "Solar first (SUB)": 1
      "SBU priority": 2

  - platform: modbus_controller
    name: "POWMR Max Total Charge Current"
    optimistic: true
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5022
    value_type: U_WORD
    optionsmap:
      "10": 10
      "20": 20
      "30": 30
      "40": 40
      "50": 50
      "60": 60
      "70": 70
      "80": 80
      "90": 90
      "100": 100
      "110": 110
      "120": 120
      "130": 130
      "140": 140
      "150": 150
      "160": 160

  - platform: modbus_controller
    name: "POWMR Utility Charge Current"
    optimistic: true
    skip_updates: ${select_skip_updates}
    entity_category: config
    address: 5024
    value_type: U_WORD
    optionsmap:
      "10": 10
      "20": 20
      "30": 30
      "40": 40
      "50": 50
      "60": 60
      "70": 70
      "80": 80
      "90": 90
      "100": 100
      "110": 110
      "120": 120
      "130": 130
      "140": 140